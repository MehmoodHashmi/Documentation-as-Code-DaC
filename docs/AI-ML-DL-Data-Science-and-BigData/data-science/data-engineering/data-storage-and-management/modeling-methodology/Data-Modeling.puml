@startmindmap
title =__ Data Modeling__
!theme hacker

* Data Modeling
**[#yellow] <i><size:16>**Definition:** The process of creating a conceptual, logical, and physical representation of data structures and relationships within an organization's database system.
** Types of Data Models
*** Conceptual Data Model
****[#yellow] <i><size:14>**Definition:** Represents high-level business concepts and relationships without specific implementation details.\n*<i><size:14>Focuses on business concepts.
****[#white] <i><size:14>**Examples:** Entity-Relationship **(ER)** model, Object-Oriented model.
*** Logical Data Model
****[#yellow] <i><size:14>**Definition:** Defines the structure, relationships, and constraints of data at a more detailed level, independent of any specific database management system.
****[#white] <i><size:14>**Examples:** Relational model **(tables, entities, attributes)**, Unified Modeling Language **(UML)** class diagram.
*** Physical Data Model
****[#yellow] <i><size:14>**Definition:** Specifies how data will be stored in a database. \n* <i><size:14>Specifies the implementation details of data structures, including storage formats, indexing, and optimization considerations.
****[#white] <i><size:14>**Examples:** Relational schema, Data Definition Language **(DDL)** scripts.

**[#a] Data Modeling Approaches
***[#gold] ===Entity-Relationship **(ER)** Modeling
****[#yellow] <i><size:14>**Definition:** Represents entities, attributes, and relationships between entities using entity-relationship diagrams.
****[#white] <i><size:14>**Examples:** Crow's Foot notation, Chen notation.
***[#black] <i><size:16>**[[../../../../../books/1-books-backlog/DBMS/Dimensional-Modeling.puml Dimensional Modeling]]**
****[#yellow] <i><size:14>**Definition:** Focuses on modeling data for data warehousing and business intelligence applications, emphasizing the **relationships between dimensions and facts.**
****[#pink] <i><size:14>**Examples: Star schema, Snowflake schema.**
***[#orange] ===Object-Relational Modeling
****[#yellow] <i><size:14>**Definition:** Combines object-oriented concepts with relational database principles, allowing for the storage of complex data types and behavior.
****[#white] <i><size:14>**Examples:** Object-Relational Database Management Systems **(ORDBMS)**, Unified Modeling Language **(UML)** extensions.
**[#lime] <i>Key Concepts in Data Modeling
*** Entities
****[#yellow] <i><size:14>**Definition:** Represent real-world objects, such as customers, products, or orders, with attributes that describe their properties.
****[#white] <i><size:14>**Examples:** Customer entity **(name, address, email)**, Product entity **(name, price, description)**.
*** Relationships
****[#yellow] <i><size:14>**Definition:** Capture associations and interactions between entities, defining how they are related to each other.
****[#white] <i><size:14>**Examples:** One-to-One, One-to-Many, Many-to-Many.
*** Attributes
****[#yellow] <i><size:14>**Definition:** Describe the characteristics or properties of entities.
****[#white] <i><size:14>**Examples:** Name, Age, Address.
*** Primary Key
****[#yellow] <i><size:14>**Definition:** Uniquely identifies each record in an entity, ensuring its uniqueness and integrity.
****[#white] <i><size:14>**Examples:** CustomerID, ProductCode.
*** Foreign Key
****[#yellow] <i><size:14>**Definition:** Links an attribute in one entity to the primary key of another entity, establishing relationships between entities.
****[#white] <i><size:14>**Examples:** CustomerID in Order entity referencing Customer entity.
*** Normalization
****[#yellow] <i><size:14>**Definition:** The process of organizing data into logical and efficient structures to minimize redundancy and improve data integrity.
****[#white] <i><size:14>**Examples:** First Normal Form **(1NF)**, Second Normal Form **(2NF)**, Third Normal Form **(3NF)**.

* Data Modeling Best Practices
** Collaboration with Stakeholders
*** Involving end-users and domain experts in the modeling process.
** Documentation
*** Comprehensive documentation of entities, attributes, and relationships.
** Version Control
*** Managing versions of data models to track changes and updates.

* Evolving Trends
** Data Lakes
*** Storing large volumes of raw data in its native format for analysis.
** Graph Databases
*** Modeling and querying relationships between data entities.
** Data Mesh
*** Decentralized approach to data architecture.

@endmindmap
