@startmindmap
title =<i><size:12>Unix Architecture\n|<img:images/img_42.png{scale=.59}>|<img:images/img_18.png{scale=.5}>|<img:images/img_19.png{scale=.88}>|<img:images/img_20.png{scale=.88}>|<img:images/img_29.png{scale=.767}>|
caption <img:images/img_35.png>
!theme hacker

*[#darkblue]:<i><color #white>Unix Architecture Figure-1
|<img:images/img_18.png{scale=.5}>|
|<i>[[docs/books/1-books-backlog/operating-system/images/img_42.png System calls & subroutines]] click me|
|<img:images/img_42.png{scale=.467}>|
|<i>[[https://en.wikipedia.org/wiki/Protection_ring Protection Ring]] click me\n<img:images/img_19.png{scale=.7}>|
|<img:images/img_28.png{scale=.54}>|
|<img:images/img_20.png{scale=.94}>|
|<img:images/img_29.png{scale=.72}>|;

**[#lightblue] <i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_346.png Hardware Encapsulation]] \n<img:images/img_21.png{scale=.5}>
***[#a]:<i><color #white><size:12>Following are **[[docs/books/1-books-backlog/operating-system/images/img_32.png basic Unix system concepts]]** that are familiar to <b>system administrators, from a programmer's perspective.
====
<i><color #white><size:12>**Operating systems** (mostly **Kernel**) **[[docs/3-programming-languages/Venkat-Subramaniam/images/img_346.png encapsulate]]** computer **hardware** in **software** to make the <b>hardware easier to use.
<i><color #white><size:12>It provides a **common interface** to the **hardware** and makes the <b>hardware easier to use.
*<i><color #white><size:12>Each **kernel subsystem** has certain features like <b>concurrency, virtual memory, paging, and a virtual file system.;
***[#a]:<i><color #white><size:12>**Unix** divides the **operating system** into the **kernel** and the <b>system's software.
*<i><color #white><size:12>The **kernel** **[[docs/3-programming-languages/Venkat-Subramaniam/images/img_346.png encapsulates]]** the hardware, providing an common interface. It has priviledged access to the <b>hardware:
**<i><color #white><size:12>any other program that needs to access the hardware must do so through the operating system.
<i><color #white><size:12>By restricting other programs from using the hardware directly, the Unix **kernel** can ensure **common access** from all other <b>applications.;

****[#grey] *<b><i><color #black><size:12>[[https://www.youtube.com/watch?v=tc4ROCJYbm0&ab_channel=AT%26TTechChannel UNIX: AT&T Archives: The UNIX Operating System]] 27-minute \n<b><i><color #white><size:12>[[https://www.youtube.com/watch?v=tc4ROCJYbm0&ab_channel=AT%26TTechChannel First 5 minutes on software requirements with ulmitate explanation why & when we develop software]]
****[#grey] *<b><i><color #black><size:12>[[https://www.youtube.com/watch?v=XvDZLjaCJuw&list=LL&index=3&t=283s&ab_channel=AT%26TTechChannel UNIX: Making Computers Easier To Use -- AT&T Archives film from 1982, Bell Laboratories]] 20-minute \n<b><i><color #black><size:12>[[https://www.youtube.com/watch?v=XvDZLjaCJuw&list=LL&index=3&t=283s&ab_channel=AT%26TTechChannel First 5 minutes on software requirements with outstanding example]]

***[#a]:<i><color #white><size:12>The basic design philosophy of UNIX is to provide **simple**, powerful **tools (Programs)** that can be **combined** to perform <b>complex tasks.
<i><color #white><size:12>It features a command-line interface that allows users to interact with the system through a series of commands,
<i><color #white><size:12>rather than through a <b>graphical user interface (GUI).
====
*<b><i><color #white><size:12>[[docs/books/1-books-backlog/operating-system/images/img_34.png Linux kernel vs Linux vs UNIX]];

**[#lightblue] <i><color #white><size:12>System Software (Programs)
***[#gold]:<i><color #black><size:12>**System software:** runs in **user space**. Unlike the kernel, it does not have privileged access to the hardware. Indeed, the primary
<i><color #black><size:12>difference between systems software and other programs is that it comes packaged with the Unix operating systems.
<i><color #black><size:12>Most of the **Unix commands** you will **use** are actually **system software** running in <b>user space.
====
<i><color #black><size:12>**Figure 1** shows a diagram of the Unix operating system. The hardware is drawn at the center of the diagram surrounded by the kernel.
<i><color #black><size:12>The kernel is, in turn, surrounded by the system software which contains many of the common Unix commands.;

****[#yellow] <i><color #black><size:12>**Unix Commands:** \n*<i><color #black><size:12>ls, cat, pwd, rm, mkdir, awk etc.

**[#lightblue] <i><color #white><size:12>The Terminal
***[#green]:<i><color #white><size:12>Though most Unixes have applications with a **Graphical User Interface (GUI)** the most common way to interact with
<i><color #white><size:12>Unix is through a **terminal.** Windows also has a terminal interface called <b>Command Prompt
<img:images/img_22.png>
|<#grey><i><color #white><size:12>**[[docs/books/1-books-backlog/operating-system/idea.sh Shell scripting:]]** UNIX provides a powerful scripting language that allows users to automate tasks.|
*<i><color #white><size:12>**Shell commands:** Shell is the utility that processes your requests. When you type in a command at the terminal, the
<i><color #white><size:12>shell interprets the command and calls the program that you want. There are various commands like cp, mv, cat, grep,
<i><color #white><size:12>id, wc, nroff, a.out and more.
*<i><color #white><size:12>A **shell** is a **command-line interpreter** that reads user input and executes commands. The user input to a shell is
<i><color #white><size:12>normally from the terminal (an interactive shell) or sometimes from a <b>[[ docs/books/1-books-backlog/operating-system/idea.shfile (called a shell script).]];

****[#green] <i><color #white><size:12><b>[[https://www.youtube.com/watch?v=3X93PnKRNUo&t=2s&ab_channel=CoreDumped Terminal: and concurrency is an illusion? 15min video]]
***[#green] <i><color #white><size:12><b>Unix Commands
****[#yellow]:<i><color #black><size:12>The **shell** is an important Unix **system program.** The **shell** accepts commands typed into the **terminal** and **executes** them.
*<i><color #black><size:12>It executes two types of commands: <b>internal and external.
**<i><color #black><size:12>**Internal commands** are built into the <b>shell.
**<i><color #black><size:12>**External commands** are **other programs** in **user space** that the **shell** initiates in their own <b>process.
<i><color #black><size:12>Generally internal commands execute faster than external commands, but the difference is small on modern computers.;
****[#gold] <img:images/img_23.png{scale=.8}>
*****[#yellow]:<i><color #black><size:12>Unix used white space (tab, space) to separate fields and line feeds to separate records.
<i><color #black><size:12>A command is a single record, which the shell interprets as a request for an action.
<i><color #black><size:12>Each option is specified by a letter or string of letters possibly followed by another string of letters.
<i><color #black><size:12>Each filename is interpreted as an operand to the command.
<i><color #black><size:12>For example, the **cat** will display the content of a **file** on the screen. For example, if we have a file called
<i><color #black><size:12>**RomeoAndJuliet** that contains the Shakespeare's Romeo and Julliet. We can print it out on the screen using the command:

*<b><i><color #black><size:12>""cat RomeoAndJuliet""
|<#a><b><i><color #black><size:12>[[docs/books/1-books-backlog/operating-system/images/img_24.png Our terminal will show us:]]|<#red><b><i><color #black><size:12>[[docs/books/1-books-backlog/operating-system/images/img_24.png click me]]|
<b><i><color #black><size:12>The problem is that the file is scrolling off the top of the file.
<b><i><color #black><size:12>We can use the option "-n" to number the lines so we can see how many there are. That is, we use the command

*<b><i><color #black><size:12>""cat -n RomeoAndJuliet""
|<#a><b><i><color #black><size:12>[[docs/books/1-books-backlog/operating-system/images/img_25.png Now we can see that there are 4347 lines in the file.]]|<#red><b><i><color #black><size:12>[[docs/books/1-books-backlog/operating-system/images/img_25.png click me]]|

<i><color #black><size:12>Most Unix **commands** have more **options** that anyone can remember. Fortunately, there is a command **man** that shows all of the <b>options.
<i><color #black><size:12>To find out all of the **options** for **cat,** type

*<b><i><color #black><size:12>""man cat""

<i><color #black><size:12>And, fortunately, the results of typing man do no scroll off the screen. Instead, a single page is displayed.
<i><color #black><size:12>At the bottom of the screen man displays a colon. If you type a space, the next page is displayed; if
<i><color #black><size:12>you type a carriage return (enter or return) the next line is displayed. If you type 'b', the previous page is displayed.
<i><color #black><size:12>If you type 'q' the the man command terminates.
|<#a><b><i><color #black><size:12>[[docs/books/1-books-backlog/operating-system/images/img_26.png click]]|<#red><b><i><color #black><size:12>[[docs/books/1-books-backlog/operating-system/images/img_26.png click me]]|
<i><color #black><size:12>The **options** start with a ""'-',"" to distinguish them from the **filenames.** If you supply cat with multiple filenames, the content of all of the files display on the screen.
<i><color #black><size:12>For example, Lets create two **files**: one, called **file1** containing "This is the first file." and the second, called **file2** containing "This is the second file."
<i><color #black><size:12>When you type

*<b><i><color #black><size:12>""cat file1 file2""

<i><color #black><size:12>you will see the following:
<img:images/img_27.png>;

**[#lightblue] <i><color #white><size:12>Unix Files and Directories
***[#gold] <i><color #black><b><size:12>Implementation of file permissions and access control.\n<img:images/img_30.png>
**[#lightblue] <i><color #white><size:12>New Commands
***[#green] <i><color #white><size:12><img:images/img_31.png>

**[#lightblue]:|<#grey><i><color #white><size:12>Three Types (strategies) of Kernels:|<#red><i><color #white><size:12>[[docs/books/1-books-backlog/operating-system/images/img_40.png (Another 5-kernel (types) strategies)]]|
<i><color #white><size:12>1- Monolithic Kernel:
*<i><color #white><size:12>All kernel services are in a single, large binary.
*<i><color #white><size:12>Efficient but less modular.
|<i><color #white><size:12>2- Microkernel:|
*<i><color #white><size:12>Basic functions are in the kernel, and other services run as separate processes.
*<i><color #white><size:12>More modular but can have a performance overhead.
|<i><color #white><size:12>3- Hybrid Kernel:|
*<i><color #white><size:12>Combines features of both monolithic and microkernel architectures.
*<i><color #white><size:12>Strives for a balance between efficiency and modularity.;
*** <img:images/img_39.png>
***:<i><color #black><size:12>In µ kernel, the near-minimum amount of mechanisms are included in the kernel mode. These mechanisms include
<i><color #black><size:12>basic IPC (inter-process communication), scheduling, and low-level address space management. In terms of
<i><color #black><size:12>**source code size**, generally, a microkernel is smaller than a monolithic kernel.;
**** <img:images/img_41.png>
@endmindmap
