@startwbs
title =__ Algorithm Design Strategies by Abdul Bari YouTube__\n I've identified that the difference between the <color #118888>__**algorithm and the program **__</color>is same as the <color #crimson>__**domain model and uml class  diagram**__</color>


* **Algorithms**
** **Algorithm**
*** **Write the algorithm at** <color #crimson>__**design time**__</color>
*** **Who writes the algorithm? The person who has the** <color #118888>__**Domain Knowledge**__</color>
*** Which language for writing algorithm? you can use any language!
**** Plain english
**** Mathematical notation
**** ...
*** Hardware and software independent
*** Analyze algorithm; also called **Priori Analysis**
**** algorithm correctness
**** Efficient
***** **time** complexity
***** **space** complexity
***** **network** complexity
***** **power** consumption complexity
***** **CPU register** consumption complexity
*** **Characteristics of Algorithm**
**** **Input:** algorithm may take 0 or more input
**** **Output:** algorithm must produce at least one output
****:**Definiteness:** every statement should have single and exact meaning
Don't write statements which can't be understood & solved e.g, 1/0, (-1)^1/2;
**** **Finiteness:** algorithm must terminate at some point, duration of algo must be finite
**** **Effectiveness:** Do not write unnecessary statements, \nevery statement must serve some purpose
*** **How to write Algorithm?** all notations are correct stick with one\n <img:images/img_1.png>
**** Do not worry about **data type of parameters (a, b)**, when you \nwrite **program** only then you **decide what data type** are required
**** Do not worry about **variable declaration**, its understood e.g., **temp = a**
**** Do not worry about **minor details**, that are **programming language specific**
*** **How to Analyze an Algorithm?** \n2-Major complexities **(Time & space)**
****[#pink] **1. Time** How much **time/duration algorithm** consumes to produce the output\n<img:images/img_2.png>
*****[#pink] Every **simple statement (no function invocation)** in an algorithm takes **1-unit of time**
*****[#yellow] **1. Frequency Count Method** for finding time complexity of algorithm \n<img:images/img_4.png>
*****[#yellow] **1. Frequency Count Method** for finding time complexity of algorithm \n<img:images/img_4.png>
*****[#yellow] **1. Frequency Count Method** example for finding time complexity of algorithm \n<img:images/img_8.png>
****[#pink] **2. Space** complexity How much **memory space (RAM)** algorithm consumes. \n**Identify the variables** in this **algorithm**  consumes\n<img:images/img_3.png>
*****[#pink] **Identify the variables** in this **algorithm**  consumes
*****[#pink] **Finding Space** complexity How much **memory space (RAM)** algorithm consumes \n**Identify the variables** in this **algorithm.** \n**example**\n<img:images/img_5.png>
*****[#pink] **Finding Space** complexity How much **memory space (RAM)** algorithm consumes.  \n**Identify the variables** in this **algorithm.** \n**example**\n<img:images/img_7.png>
*****[#pink] **Finding Space** complexity How much **memory space (RAM)** algorithm consumes.  \n**Identify the variables** in this **algorithm.** \n**example**\n<img:images/img_9.png>
**** **3. Network** consumption complexity, How much **data** is going to be transferred? The algorithm you \nare writing **transfers:**
***** **Large size data**
***** **Data size can be compressed or reduced?**
**** **4. Power** consumption complexity Nowadays we are using android, tablet, smartwatch, IoT, and Iphone
**** **5. CPU register** consumption complexity if you are developing algorithm for **device drivers** the \n**system level programming**
***  **Class of Functions** and their execution times on a computer executing 1 million operation per second (1 sec = 106 μsec  = 103 msec): \n<img:images/img_11.png> \n**▪ A factorial algorithm – O(n!)** \nRuntime grows the fastest and **becomes quickly unusable for even small values of n.**

***  Compare Class of Functions \n<img:images/img_10.png> \n**Where, n is the input size and c is a positive constant.** \n<img:images/img_12.png>
***:**Space-Time Tradeoff and Efficiency**
There is usually a trade-off between optimal memory use and runtime performance.
In general for an algorithm, space efficiency and time efficiency reach at two opposite ends and each
point in between them has a certain time and space efficiency. So, the more time efficiency you have,
the less space efficiency you have and vice versa.
For example, Mergesort algorithm is exceedingly fast but requires a lot of space to do the operations.
On the other side, Bubble Sort is exceedingly slow but requires the minimum space.
At the end of this topic, we can conclude that finding an algorithm that works in less running time
and also having less requirement of memory space, can make a huge difference in how well an
algorithm performs.;

***:**Asymptotic Notations Big Oh - Omega - Theta:** This topic belongs to mathematics, as functions
belongs to mathematics so does this topic. For time complexity you have been using functions
* Three notations are commonly used: **Big O, Omega, and Theta.**
* For representing any **function** in **simple and communicable form** so that one can easily get the idea about the
  algorithm. So, that's why **Asymptotic notation** is an important topic in algorithms, used to represent the time
  complexity of functions. As we can't write lengthy functions each time instead we need simple notation.
* **Big O notation** represents an** upper bound** of a function, **indicating** the **maximum growth rate**.
<img:images/img_14.png>
* **Omega notation** represents a **lower bound** of a function, **indicating** the **minimum growth rate**.
<img:images/img_13.png>
* **Theta notation** represents an** average bound** of a function, **indicating** both **upper and lower bounds** are similar.
<img:images/img_15.png>
* This notation is not related to **best-case or worst-case analysis** in algorithms.;

** **Program**
*** **Write** the **program** at <color #118888>__**implementation time**__</color>
*** **Who writes the program? the programmer; If programmer has the** \n<color #crimson>__**Domain Knowledge**__</color> **he can write the algorithm**
*** Which language for writing program? you can use only programing language!
****  C, C++
****  Java, Kotlin, Scala, groovy, Clojure
****  python
*** Hardware and software dependent
*** Testing (run and check) the program, Also called **Posteriori Testing**
 @endwbs
