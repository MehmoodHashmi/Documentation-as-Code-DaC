@startmindmap
title =<i><b><u>Classes Vs. Data-structures
* ==<b><i>[[docs/books/1-books-backlog/data-structure-and-algorithm/classes-vs-data-structres.adoc Class Vs. Data-structures .adoc file important aritcle by robert c martin]] A must read talks about DTO's, Databases, ORM, etc.
!theme hacker

*[#darkblue] <i><color #white>Classes vs Data-structures
**[#lightblue] <i>What is a **class**?
***[#yellow] <i><color #black><size:14>A **class** is the **specification** of a **set** of <b>similar objects.
** <i>What is an **object**?

***[#yellow]:*<i><color #black><size:14>An **object** is a **set of functions** that **operate** upon <b>encapsulated data elements.
*<i><color #black><size:14>Or rather, **an object** is a **set of functions** that **operate** on <b>implied data elements.

<i><color #black><size:14>The **functions** of **an object** imply the **existence** of some **data elements**; but that **data** is not "directly" **accessible or visible** "outside" of the <b>object.

**<u><i><color #black><size:14>Isn’t the **"data"** inside the <b>"object"?

<i><color #black><size:14>It could be; but there’s no rule that says it must be. From the **point of view** of the **user,** an **object** is nothing more than a **set** of <b>functions.
<i><color #black><size:14>The **data** that those **functions** "operate" upon must exist, but the "location" of that **data** is unknown to the <b>user.;

** <i>What is a **data structure**?
***[#yellow]:*<i><color #black><size:14>A **data structure** is a **cohesive set** of <b>data elements.
*<i><color #black><size:14>Or, in other words, a **data structure** is a **set** of **data elements** **"operated"** upon by <b>implied functions.;

**[#lightblue] <i><color #black><size:14>Indeed! They are complements of each other. They fit together like a hand in a glove.
***[#yellow] *<i><color #black><size:14>An **"Object"** is a "set" of "functions" that "operate" upon "implied data elements".
***[#yellow] *<i><color #black><size:14>A **"Data Structure"** is a "set" of "data elements" "operated" upon by "implied functions"

**[#gold] <i>**You got it. These are issues that every good software designer and architect needs to keep in mind.**
*:<i><color #w><size:14>OK, so let me see if I can wrap this up. Classes and Data Structures are opposites in at least three different ways.
|<#black><color #white><i><size:15> |<#white><color #black><i><size:15>Data Structures|<#blue><color #white><i><size:15>Classes|
|<#green><color #white><i><size:15>function |<#white><color #black><i><size:15>Adding new "functions" to a "set" of "data structures" is <u>"easy"</u>, you just add the function, nothing else changes.\n<color #black><i><size:11>Why? because you had not changed the current <u><color #purple>"design"</u> of the <color #purple>"Node" |<#blue><color #white><i><size:14>Adding new "functions" to a "set" of "classes" is "hard", you have to change each class.\n<color #white><i><size:11>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_170.png Why? because "interface" breaks! click me]]|
|<#darkorange><color #white><i><size:15>Type |<#white><color #black><i><size:15>Adding new "types" to a "set" of "data structures" is "hard", you have to change each <color #green>function <size:10>(Insert, Update, Access, Delete)\n<color #black><i><size:11>Why? because you had <u><color #purple>"designed"</u> the <u><color #purple>"Node" of these "data-structure"</u>  only to support a particular <u><color #purple>"Type".</u> When you try to support another "type" you 've\n<color #black><i><size:11>to change the existing "Node" design, resultantly all the "functions" manipulating this "Node" wll break.  |<#blue><color #white><i><size:15>Adding new "types" to a "set" of "classes" is "easy", you just add the new class.\n<color #white><i><size:11>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_169.png Why & how? via DIP, or runtime polymorphism click me]]|
|<#black><color #white><i><size:15> |<#white><color #black><i><size:15>1- Data structures make data visible while keeping <color #green>functions implied <size:11>(understood, suggested)|<#blue><color #white><i><size:15>1- Classes make functions visible while keeping <color #pink>data implied <size:11>(understood, suggested)|
|<#black><color #white><i><size:15> |<#white><color #black><i><size:15>2- Data structures make it easy to add functions but hard to add types.|<#blue><color #white><i><size:15>2- Classes make it easy to add types but hard to add functions.|
|<#black><color #white><i><size:15> |<#white><color #black><i><size:15>3- Data Structures expose callers to <u>"recompilation and redeployment".|<#blue><color #white><i><size:15>3- Classes isolate callers from recompilation and redeployment.|;

@endmindmap
