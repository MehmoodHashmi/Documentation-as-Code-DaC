@startmindmap
title =<i><b><u>Sharding
!theme hacker

**[#darkblue] <i><color #white>Sharding
**[#lightblue] <i><color #black><size:14>Definition
***[#green] <b><i><color #white><size:14>Sharding is a data partitioning technique used in distributed databases to horizontally scale data storage and improve performance.
**[#lightblue] <i><color #black><size:22>Key Concepts
***[#green] <b><i><color #white><size:14>Data Partitioning
****[#yellow] <i><color #black><size:14>Dividing data into smaller subsets called shards or partitions.
****[#yellow] <i><color #black><size:14>Each shard contains a subset of data based on a predefined partitioning strategy.
***[#green] <b><i><color #white><size:14>Distributed Storage
****[#yellow] <i><color #black><size:14>Storing shards across multiple machines or nodes in a distributed manner.
****[#yellow] <i><color #black><size:14>Each machine/node is responsible for managing a subset of the data.
***[#green] <b><i><color #white><size:14>Scalability
****[#yellow] <i><color #black><size:14>Enables scaling horizontally by adding more machines/nodes to handle increased data load and traffic.
****[#yellow] <i><color #black><size:14>Allows distributing the workload across multiple machines/nodes for better performance.
**[#lightblue] <i><color #black><size:14>Benefits
***[#green] <b><i><color #white><size:14>Improved Performance
****[#yellow] <i><color #black><size:14>Distributing data across multiple machines/nodes allows parallel processing and reduces the load on individual resources.
****[#yellow] <i><color #black><size:14>Queries and operations can be executed in parallel, leading to faster response times.
***[#green] <b><i><color #white><size:14>Horizontal Scalability
****[#yellow] <i><color #black><size:14>Sharding enables adding more machines/nodes to the system as the data grows, allowing seamless scaling without downtime.
****[#yellow] <i><color #black><size:14>Each machine/node can handle a subset of the data, ensuring efficient utilization of resources.
***[#green] <b><i><color #white><size:14>Fault Tolerance
****[#yellow] <i><color #black><size:14>Sharding provides fault tolerance by replicating data shards across multiple machines/nodes.
****[#yellow] <i><color #black><size:14>If one machine/node fails, the data can still be accessed and served from other available machines/nodes.
**[#lightblue] <i><color #black><size:22>Sharding Strategies
***[#green] <b><i><color #white><size:14>Range-Based Sharding
****[#yellow] <i><color #black><size:14>Data is partitioned based on a specific range of values <b>(e.g., customer ID, date range).
****[#yellow] <i><color #black><size:14>Each shard manages a specific range of values, and queries targeting a specific range can be directed to the corresponding shard.
***[#green] <b><i><color #white><size:14>Hash-Based Sharding
****[#yellow] <i><color #black><size:14>Data is partitioned based on a hash function applied to a specific key <b>(e.g., user ID, product ID).
****[#yellow] <i><color #black><size:14>The hash function determines the shard where the data should be stored, allowing for even distribution across shards.
***[#green] <b><i><color #white><size:14>Directory-Based Sharding
****[#yellow] <i><color #black><size:14>A centralized directory or metadata service maintains the mapping of data to shards.
****[#yellow] <i><color #black><size:14>The directory helps route queries to the appropriate shard by keeping track of the shard locations for each data item.
**[#lightblue] <i><color #black><size:14>Considerations and Challenges
***[#green] <b><i><color #white><size:14>Data Consistency
****[#yellow] <i><color #black><size:14>Maintaining consistency across multiple shards can be challenging due to distributed nature.
****[#yellow] <i><color #black><size:14>Techniques like eventual consistency or distributed transactions may be used to ensure data integrity.
***[#green] <b><i><color #white><size:14>Query Routing
****[#yellow] <i><color #black><size:14>Routing queries to the correct shard based on the sharding strategy requires efficient query routing mechanisms.
****[#yellow] <i><color #black><size:14>Query routers or load balancers can be used to direct queries to the appropriate shard.
***[#green] <b><i><color #white><size:14>Data Rebalancing
****[#yellow] <i><color #black><size:14>As the data grows or the number of shards changes, data rebalancing may be necessary to ensure even distribution.
****[#yellow] <i><color #black><size:14>Moving data between shards while maintaining consistency can be a complex task.
@endmindmap
