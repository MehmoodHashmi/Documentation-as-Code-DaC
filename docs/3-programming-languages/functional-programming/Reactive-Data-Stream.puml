@startmindmap
title =<i>__ Reactive Data Stream__
!theme hacker

*[#darkblue] <i>Reactive Data Stream

**[#lightblue] <i><color #blac><size:14>Definition
***[#green] <b><i><color #white><size:14>Data stream that follows the principles of reactive programming
***[#green] <b><i><color #white><size:14>Emphasizes responsiveness, elasticity, and resilience

**[#lightblue] <i><color #blac><size:14>**Reactive Programming**
***[#green] <b><i><color #white><size:14>**Definition**
****[#yellow] <i><color #black><size:14>Programming paradigm focused on building asynchronous and event-driven systems
****[#yellow] <i><color #black><size:14>Enables handling and processing of data streams in a non-blocking manner

***[#pink] <i><size:22>**Key Concepts**
****[#yellow] <i><color #black><size:14>Observables
*****[#yellow] <i><color #black><size:14>Represents a stream of data or events that can be observed and processed
*****[#yellow] <i><color #black><size:14>Emits data items asynchronously to subscribers

****[#yellow] <i><color #black><size:14>Observers
*****[#yellow] <i><color #black><size:14>Subscribes to observables and reacts to emitted data items or events
*****[#yellow] <i><color #black><size:14>Processes the data items asynchronously as they arrive

****[#yellow] <i><color #black><size:14>Operators
*****[#yellow] <i><color #black><size:14>Functions for transforming, filtering, combining, or manipulating the data stream
*****[#yellow] <i><color #black><size:14>Enables complex operations on the data items emitted by observables

**[#lightblue] <i><color #blac><size:14>Reactive Streams
***[#green] <b><i><color #white><size:14>Definition
****[#yellow] <i><color #black><size:14>Initiative for providing a standard for asynchronous stream processing with non-blocking backpressure
****[#yellow] <i><color #black><size:14>Enables interoperability and composition of reactive systems and libraries

***[#pink] <i><size:22>**Backpressure**
****[#yellow] <i><color #black><size:14>Mechanism for controlling the rate of data flow in a reactive data stream
****[#yellow] <i><color #black><size:14>Prevents overwhelming subscribers with data they cannot handle

***[#green] <b><i><color #white><size:14>Technologies and Libraries
****[#yellow] <i><color #black><size:14>ReactiveX (Rx)
*****[#yellow] <i><color #black><size:14>Cross-platform library for reactive programming with support for multiple programming languages
*****[#yellow] <i><color #black><size:14>Examples: RxJava, RxJS, Rx.NET

****[#yellow] <i><color #black><size:14>Project Reactor
*****[#yellow] <i><color #black><size:14>Reactive library for building non-blocking applications on the Java Virtual Machine (JVM)
*****[#yellow] <i><color #black><size:14>Provides integration with Spring Framework for reactive applications

****[#yellow] <i><color #black><size:14>Akka Streams
*****[#yellow] <i><color #black><size:14>Stream processing library for building reactive and scalable systems in the Akka toolkit
*****[#yellow] <i><color #black><size:14>Offers support for backpressure and asynchronous processing

**[#lightblue] <i><color #blac><size:22>Use Cases
***[#green] <b><i><color #white><size:14>Real-Time Applications
****[#yellow] <i><color #black><size:14>Reactive data streams are suitable for building real-time systems
****[#yellow] <i><color #black><size:14>Examples: Real-time analytics, real-time dashboards, streaming data pipelines

***[#green] <b><i><color #white><size:14>IoT (Internet of Things)
****[#yellow] <i><color #black><size:14>Reactive streams handle high-velocity and high-volume data from IoT devices
****[#yellow] <i><color #black><size:14>Examples: Sensor data processing, telemetry data analysis

***[#green] <b><i><color #white><size:14>Event-Driven Architectures
****[#yellow] <i><color #black><size:14>Reactive programming facilitates event-driven communication and handling of events
****[#yellow] <i><color #black><size:14>Examples: Microservices, event sourcing, event-driven messaging systems

@endmindmap
