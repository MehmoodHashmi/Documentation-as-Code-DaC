@startmindmap
title =<i><b><u><size:18>How to approach Refactoring \n<i>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_425.png See notes on Clean Code by Robert C Martin click me]]

!theme hacker

*[#darkblue] <i><color #white>How to approach \n<i><color #white>Refactoring
**[#lightblue] <i><color #black><size:12>Introduction

***[#green]:<b><i><color #white><size:12>We can't deliver good code on the first write. We first have to make the code work, then we have to make it better from different points of view:
<b><i><color #white><size:12>ease of change, better quality, reducing complexity, and so on.
<b><i><color #white><size:12>We all know that we have to constantly refactor the code, but what are some of the tenets we should follow for better journey through refactoring.;
***[#green] <b><i><color #white><size:12>Refactoring is an art of improving the design of existing code
****[#yellow] <i><color #black><size:12>**Refactoring:** is your genuine desire to improve the quality of your code & design in it.
****[#yellow]:<i><color #black><size:12>**Refactoring:** A process of changing the software system in such a way that it does not
<i><color #black><size:12>alter the external behavior of the code yet improves its internal structure. --- Martin Fowler;

**[#lightblue] <i><color #black><size:12>Make it work, make it better real soon!
***[#green] <b><i><color #white><size:12>TDD
****[#yellow] <i><color #black><size:12>Do <b><color #red>Red, <color #lime>Green, <color #black>Refactor
****[#yellow] <i><color #black><size:12>It is almost impossible to write correct for the first time (structural design)
****[#darkorange]:<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_512.png Micro deletion vs Macro deletion]]
====
<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_466.png 1- Structure (generally reversible)]]
<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_466.png 2- Behavior (generally irreversible)]];
*****[#a] *<i><color #black><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_512.png Micro deletion]]:** Deleting small units **(classes or methods)** of code during <b>TDD  \n*<i><color #black><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_256.png Macro deletion]]:** Deleting **module/components** units of code during TDD or CBD or Integration
**[#lightblue]:<i><color #black><size:22>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_249.png Refactor]]
<i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_466.png 1- Structure (generally reversible)]]
<i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_466.png 2- Behavior (generally irreversible)]];
***[#green] <b><i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_131.png 50% to 60% of the time you want to]]
****[#yellow] <i><color #black><size:12><b>Refactor:</b> others people code
***[#green] <b><i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_131.png Other times you need to 've the courage to]]
****[#yellow] <i><color #black><size:12><b>Rewrite:</b> your own code
**[#lightblue] <i><color #black><size:12><b>But Why
***[#green] <b><i><color #white><size:12>You can't be agile if your code sucks!
***[#green] <b><i><color #white><size:12>But it takes time
****[#yellow] <i><color #black><size:12><b>Yes it will take time
***[#green] <b><i><color #white><size:12>Mind your speed
****[#yellow] <i><color #black><size:12>**First law of Programming:** "Lowering quality lengthens development time"
****[#yellow] <i><color #black><size:12>Sometimes you've to slowdown in order to <b>gain speed

**[#lightblue]:<i><color #black><size:12><b>Why Refactor
*<b><i><color #white><size:12>To make the code easier to understand
*<b><i><color #white><size:12>To make the code easier to maintain
*<b><i><color #white><size:12>To make the code changes affordable
*<b><i><color #white><size:12>After all change is the only constant. Confucius
*<b><i><color #white><size:12>It helps you to "embrace change";
***[#green] <b><i><color #white><size:12>Programs must be written for people to read, and only incidentally for machines to execute. ---Abelson & Sussman
***[#green] <b><i><color #white><size:12>Code is how we tell our colleagues how we feel about them.
***[#green] <b><i><color #white><size:12>Coding is an act of empathy
***[#darkorange]:*<b><i><color #white><size:18>Everytime you push the code there is somebody pulling it on the other. You don't want to hit them on the face!
*<b><i><color #white><size:18>Always think of the person who is going to read your code!;
**[#lightblue] <i><color #black><size:12>Strive to Evolve
***[#green] <b><i><color #white><size:12>You can't write perfect code in one sitting ---Impossible
***[#green] <b><i><color #white><size:12>Design, rather than happening right just once, evolves continuously during development
***[#green] <b><i><color #white><size:12>Code that is hard to understand is worst than code that's lost
***[#green] <b><i><color #white><size:12>Benefit
****[#yellow] <i><color #black><size:12>Refactoring reduces your risk  --can lead to lightweight pragmatic design
**[#lightblue] <i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_256.png Strike a balance]]
***[#green] <b><i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_256.png Just because you think you need to change, it doesn't mean it needs to change]]
***[#green] <b><i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_256.png Consider cost & impact of change]]
****[#yellow] <i><color #black><size:12>Set a second opinion
****[#yellow] <i><color #black><size:12>Don't solider alone
**[#lightblue] <i><color #black><size:12>Why fear refactoring?
***[#green] <b><i><color #white><size:12>What if it breaks something that worked?
***[#green] <b><i><color #white><size:12>Is my change worst than the original code?
***[#green] <b><i><color #white><size:12>We hate being embarrassed, it's easy to leave things as is.
**[#lightblue] <i><color #black><size:12>Zeroth Principle \n<img:images/img_472.png{scale=.8}>
***[#green]:<b><i><color #white><size:12>Rely on automated tests;
*<b><i><color #white><size:12>Most ideal if you can 've unit tests
*<b><i><color #white><size:12>If you can't, high-level functional/integration test is good
*<b><i><color #white><size:12>Isolate candidate code & create test if you've to.;
***[#green] <b><i><color #white><size:12>What to look for?
****[#yellow] <b><i><color #black><size:12>Surprisingly, real good advice comes from an old book on writing good English!
****[#yellow] <b><i><color #black><size:12>Brevity: write small paragraphs and sentences; In programming small classes & functions
**[#lightblue] <i><color #black><size:12>First Principle
***[#green] <b><i><color #white><size:12>Reduce code
***[#green] <b><i><color #white><size:12>Don't write code that is not really needed! YAGNI Principle
***[#green] <b><i><color #white><size:12>Programmers write as much code as restaurants serve food-- way too much
****[#yellow] <b><i><color #black><size:12>Code is like people on a crowded train
***[#green] <b><i><color #white><size:12>Code you don't write, don't 've to be "maintained"
****[#yellow] <b><i><color #black><size:12>Code you don't write, has fewest bugs
***[#yellow] <b><i><color #black><size:12>Attain True Perfection
****[#gold] <b><i><color #black><size:12>Perfection is achieved, not when there is nothing left to add, but when there is nothing left to remove ---Antoine de Saint-Exupery
****[#gold] <b><i><color #black><size:12>Refactoring is about removing stuff!
**[#lightblue] <i><color #black><size:12>Second Principle
***[#yellow] <b><i><color #black><size:12>Avoid clever code keep it simple; make it clear, not clever. --- UNIX philosophy in one word KISS Principle
***[#gold] <b><i><color #black><size:12>Clear code communicates much easily, easy to understand, less error prone, easier to maintain
**[#lightblue] <i><color #black><size:12>Third Principle
***[#yellow] <b><i><color #black><size:12>Make it small & Cohesive
****[#gold] <i><color #black><size:12>Why? Code that is cohesive changes less frequently, code that is not cohesive changes more frequently (& also very expensive to change as well due to irrelevant dependencies) <b>Fragility!
****[#gold] <i><color #black><size:12>Avoid long methods (note length of functions instead number of abstractions in the function; <b>Follow SLAP)
****[#gold] <i><color #black><size:12>Assign single responsibility to each method & each class
****[#gold] <i><color #black><size:12>If it doesn't belong here, don't add it
**[#lightblue] <i><color #black><size:12>Fourth Principle
***[#yellow] <b><i><color #black><size:12>Eliminate Duplication
***[#yellow] <b><i><color #black><size:12>Keep Code DRY!
***[#yellow] <b><i><color #black><size:12>Every piece of knowledge must 've a single, unambiguous, authoritative representation within a system.--- Andy Hunt & Dave Thomas in the book Pragmatic Programmers
**[#lightblue] <i><color #black><size:12>Fifth Principle
***[#yellow] <b><i><color #black><size:12>Eliminate Dependency
****[#gold] <b><i><color #black><size:12>Don't strive to reduce Dependency/decoupling. Get rid of it!
****[#darkorange] <b><i><color #black><size:22>"Decouple" only when you can't "Eliminate".
*****[#darkorange] <i><color #black><size:18><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_514.png Redesign vs. Research & Solution vs Dissolution]]
**[#lightblue] <i><color #black><size:12>Sixth Principle
***[#yellow] <b><i><color #black><size:12>Make comments redundant & remove them
***[#yellow] <b><i><color #black><size:12>Make Code self documented
***[#yellow] <b><i><color #black><size:12>Write executable comments:
****[#gold] *<b><i><color #black><size:12>A "good test" is worth a thousand "comments"!  \n*<b><i><color #black><size:12>A "picture" is worth a thousand "words"!
*****[#darkorange] *<b><i><color #black><size:12>Have we met before, No, I read your comment! --- Real Story told by venkat
****[#gold] *<b><i><color #black><size:12>Comment "why" & not "What"
*****[#darkorange]:*<b><i><color #black><size:12>Why does this piece of code exist?
*<b><i><color #black><size:12>Why are we solving this problem?
==<b><i><color #black><size:12>What==
*<b><i><color #black><size:12>"What" itself is clear while looking at the code!, especially when it is written properly
*<b><i><color #black><size:12>Don't comment bad code, instead refactor it;
**[#lightblue]:<i><color #black><size:12>Seventh Principle
|<img:images/img_473.png>|
|<img:images/img_474.png>|;
***[#yellow] <i><color #black><size:12>Make sense in seconds, not in minutes, hours, days, or weeks,...
***[#yellow] <i><color #black><size:12>If you've to read through every line of code & think you lost it.
***[#yellow] <i><color #black><size:12>It's not just about size, it's about conveying intent explicitly
***[#yellow] <i><color #black><size:12>**When a programmer says:** Let me figure out what this code is saying
****[#gold] <i><color #black><size:12>This means this code sucks
****[#gold] <i><color #black><size:12>Don't make the reader read through every single line of code to understand **"what"** the code is doing
***[#yellow]:*<i><color #black><size:12>**How Do I know <color #red>if(<color #blue> if File Is Invalid<color #green>(line) <color #red>)**
====
*<i><color #black><size:12>**Convey** the **"what"** & **delegate** the <b>"how";
****[#gold] <i><color #black><size:12><b>I don't care
*****[#gold] <i><color #black><size:12>What does **"I don't care"** means in <b>Programming?
******[#darkorange] *<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_346.png Abstraction &]]\n*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_346.png Encapsulation]]
*****[#gold] *<i><color #black><size:12>It's **encapsulated**. But I want to know what is <b>inside!
******[#darkorange]:*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_346.png Okay! remove the abstraction!]] How?
*<i><color #black><size:12><b>Via <color #white>"Stepping into"</color> <b>function/class
====
**<i><color #black><size:12><b>[[https://www.youtube.com/watch?v=i-ladOjo1QA&list=LL&index=13&t=9s Complexity Explorer (What is Complexity?)]] 30-min video
***<i><color #black><size:12><b>[[https://www.youtube.com/watch?v=i-ladOjo1QA&list=LL&index=13&t=9s Physics: To understand What is electricity you've to understand what is electron?]]
***<i><color #black><size:12><b>[[https://www.youtube.com/watch?v=i-ladOjo1QA&list=LL&index=13&t=9s Physics: To understand What is Gravity you've to understand what is graviton?]]
****<i><color #black><size:12><b>[[https://www.youtube.com/watch?v=i-ladOjo1QA&list=LL&index=13&t=9s You've to go one level deeper (lower level of abstraction)]];

****[#gold] <i><color #black><size:12><b>SLAP
*****[#gold] *<i><color #black><size:12><b>We use "compose method" pattern \n*<i><color #black><size:12><b>Instructions are at a Single Level of Abstraction or detail
**[#lightblue]:<i><color #black><size:12>Eighth Principle
|<img:images/img_476.png{scale=.5}>|<img:images/img_477.png{scale=.72}>|;
***[#yellow] <i><color #black><size:12>Avoid Primitive (int, chart, float, String, double, etc. ) Obsession
****[#gold] *<i><color #black><size:12>Avoid desire to operate at lowest level of detail \n*<i><color #black><size:12>**Instead use, look for, or create higher-level** \n<i><size:12><color #black>\teasy to use abstraction
*****[#darkorange] *<i><color #black><size:12>**Reuse Methods**\n*<i><color #black><size:12>**Reuse Libraries**
**[#lightblue] <i><color #black><size:12>Ninth Principle
***[#yellow] <i><color #black><size:12>Checkin frequently, take small steps
****[#gold]:*<i><color #black><size:12>How often do I **commit** code? **Commit code** as soon as it **passes** the <b>Test
*<i><color #black><size:12>Commit frequently so you can **reduce the cost** of **undo** to near <b>zero
*<i><color #black><size:12>Don't hold code for extended period of time
*<i><color #black><size:12>Merge becomes painful
*<i><color #black><size:12>If you lock out others, you inhibit their progress
*<i><color #black><size:12>Big Bang Integration is a Big Bang fail
*<i><color #black><size:12>By checking in frequently, you allow for short quick feedback cycle
*<i><color #black><size:12>Your changes are relevant, exercised, & validated right away;
**[#lightblue] <i><color #black><size:12>Tenth Principle
***[#yellow] <i><color #black><size:12>Keep code at <b>one level of abstraction
****[#gold] <i><color #black><size:12>**Compose Method Pattern** where each **method** addresses <b>one level of abstraction
***[#yellow] <i><color #black><size:12>Refactoring Opportunity?
****[#gold]:<i><color #black><size:12>How do you know which code needs refactoring?
*<i><color #black><size:12>General awareness to sense smelly code
*<i><color #black><size:12>Use tactical code reviews
*<i><color #black><size:12>Make refactoring a regular activity, each day;
***[#yellow] <i><color #black><size:12>When not to refactor?
****[#gold] <i><color #black><size:12>**Code** is Messed up beyond any Possible <b>repair
****[#gold] <i><color #black><size:12>When you're in the middle of <b>fixing a bug
****[#gold] <i><color #black><size:12>When in the middle of another <b>change or refactoring \n*<i><color #black><size:12>Make a note to visit later
****[#gold] <i><color #black><size:12>**When/If** you don't see clear benefit to the particular refactoring activity
***[#yellow] <i><color #black><size:12>How to refactor?\n<img:images/img_478.png>
****[#yellow] <i><color #black><size:12>**Small Steps**--- devise sequence of small steps to take <b>e.g. <b><color #red>Red, <color #lime>Green, <color #black>Refactor
****[#gold] <i><color #black><size:12>Be continuous, not episodic
****[#gold] <i><color #black><size:12>Aim for bite size improvements
****[#gold] <i><color #black><size:12>Never refactor code that is not in version control
****[#gold] <i><color #black><size:12>Don't hesitate to through out change
****[#gold] <i><color #black><size:12>Check in frequently (every few minutes)

@endmindmap
