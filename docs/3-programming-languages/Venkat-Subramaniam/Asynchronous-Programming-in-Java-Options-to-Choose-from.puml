@startmindmap
title =<i><b><u><size:18>Asynchronous Programming in Java: Options to Choose from \nDr.Venkat Subramaniam -  2023\n His PhD is in parallelism
* <i><b>[[https://www.youtube.com/watch?v=1zSF1259s6w&t=4778s&ab_channel=Devoxx Asynchronous Programming in Java: Options to Choose from By Venkat Subramaniam]]
!theme hacker

*[#darkblue] <i>Asynchronous Programming in \n<i>Java: Options to Choose from
**[#lightblue] <i><color #blac><size:12>Introduction
***[#green]:<i><color #white><size:12>Java has had parallel and concurrent programming facilities from the start. In recent years the business has needed as much, if not more,asynchronous
<i><color #white><size:12>capabilities, with <b>webservices and microservices.</b> We will discuss the various options available, such as completable futures, reactive steams, & the newer
<i><color #white><size:12><b>virtual threads</b> and discuss which options are better suited and why.;

**[#lightblue] <i><color #blac><size:12>Threading
***[#green] <i><color #white><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/gif/Multi-threading-vs-Multi-processing-programming.adoc Parallel vs Concurrent]] click gif
****[#yellow] <i><color #black><size:12>Think about **execution.** In what **sequence** code gets <b>executed?
****[#a] <i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/Concurrency-and-Parallelism/Parallelism.puml Parallel:]]</b> I can walk & talk in parallel
*****[#a] <i><color #black><size:12><img:gif/img_2.png{scale=0.7}>
****[#a] <i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/Concurrency-and-Parallelism/Concurrency.puml Concurrent:]]</b> I can either drink or talk but not both simultaneously
*****[#a] <i><color #black><size:12><img:gif/img_3.png{scale=0.7}>
****[#yellow] <i><color #black><size:12><b>Resources (CPU/GPU/TPU cores) & RAM:</b> usually put restrictions/limitations on which one we can use
****[#a] <i><color #black><size:12><b>Java-1.0:</b> had <b>[[docs/3-programming-languages/Venkat-Subramaniam/Threads.puml Threads]]</b> (light weight), but sooner realized its drawback
****[#yellow] <i><color #black><size:12><b>Java-5.0:</b> had <b>Executors.</b> Don't keep creating threads all over the place its bad idea. Instead create pools of threads & schedule tasks on the pool\n*<i><color #black><size:18>In both life & programming we solve a set of problems only to realize we have now created a new set of problems\n*<i><color #black><size:18>Executors ended up into "pool induced deadlocks". <b>It was annoying!
****[#yellow] <i><color #black><size:12><b>Java-7.0:</b> had <b>ForkJoin API</b> was introduced; pool introduced deadlocks.
****[#yellow] <i><color #black><size:12><b>Java-8.0:</b> had <b>Parallel Streams & CompletableFuture</b>
****[#a] <i><color #black><size:12><b>Java-18:</b> onwards <b>[[docs/3-programming-languages/Venkat-Subramaniam/Virtual-Threads.puml Virtual Threads]]</b> are under discussion\n*<i><color #black><size:12>Maybe after three years from now we learn from the problems with virtual threads & then try to solve it
***[#green] <i><color #white><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/gif/synchronous-vs-asynchronous.adoc Parallel vs Asynchronous]] gif
***[#green] <i><color #white><size:22><b>[[docs/3-programming-languages/Venkat-Subramaniam/Spearheading-the-future-of-programming-2023.puml What does it mean to be "asynchronous"?]]
****[#yellow] <i><color #black><size:12><b>Fire & forget
****[#yellow]:<i><color #black><size:12><b>Asynchronous is "non-blocking" "request/call"
* <i><color #black><size:12>**Non-blocking** means you don't want to block your "thread of execution" & "wait" for it to finish
* <i><color #black><size:12>**Benefit of Non-blocking** is your **"thread"** becomes available to do other things
* <i><color #black><size:12><b>"Tasks:"</b>  are always "blocking". It has to wait & finish the next job but your thread becomes "non-blocking";
****[#yellow] <i><color #black><size:12><b>What does the thread do?
****[#yellow] <i><color #black><size:12><b>"Paradigm Shift"; Learning a different paradigm
***[#green] <i><color #white><size:12><b>Starting a thread & blocking on it?
****[#yellow]:<i><color #black><size:12><b>How do we structure all of this to work on it?
* <i><color #black><size:12><b>Performance</b> reasons (less critical)
* <i><color #black><size:12><b>Interoperability</b> reasons (more critical)
* <i><color #black><size:12><b>Responsiveness</b> reasons (more critical);
****[#yellow] <i><color #black><size:12><b>Blocking is not a good option!
***[#green] <i><color #white><size:12><b>Starting a thread & passing a function to a call?
****[#yellow] <i><color #black><size:12><b>Threads are not working properly so lets create more threads. This is not a good logic!
***[#green] <i><color #white><size:12><b>Why not callbacks?
****[#yellow] <i><color #black><size:12><b>JavaScript, Callback hell!
**[#lightblue] <i><color #blac><size:22>[[docs/3-programming-languages/Venkat-Subramaniam/CompletableFuture.puml Completable Future]]
***[#green] <b><i><color #white><size:12>"Promises" of JavaScript
****[#yellow] <i><color #black><size:12>"Promises" in "JavaScript" are excatly same as "CompletableFuture in Java" but with different names
****[#yellow]:<i><color #black><size:12>"Promises" think of it as a <b>Data-structure.</b> It can be in <b>three different states:
* <i><color #black><size:12>"<b>Pending</b> (state) transient keeps changing
* <i><color #black><size:12>"<b>Resolved</b> (terminal state) when green in this state it does not changes anymore
* <i><color #black><size:12>"<b>Rejected</b> (terminal state) when green in this state it does not changes anymore;
****[#yellow]:<i><color #black><size:12><b>Railway track pattern
<img:images/img_11.png{scale=0.8}>
*<i><color #black><size:12><b>Upper track is "Data Stream"
*<i><color #black><size:12><b>Lower track is "Error Stream";
*****[#yellow]:*<i><color #black><size:12><b>If all is well, you keep moving on the top upper track.
*<i><color #black><size:12><b>If there is a failure, you go down to the lower track.
*<i><color #black><size:12><b>If you recover from the failure, you are back on the upper track
<img:images/img_12.png{scale=0.8}>;
****[#yellow] <i><color #black><size:12><img:images/img_13.png{scale=0.8}>
**[#lightblue] <i><color #blac><size:22>[[docs/3-programming-languages/Venkat-Subramaniam/Continuation-and-Coroutines.puml Continuations & Coroutines]]
***[#green] <b><i><color #white><size:12>In Kotlin
***[#green] <b><i><color #white><size:12>Subroutines
***[#green] <b><i><color #white><size:12>Coroutines (functions or tasks)
***[#green] <b><i><color #white><size:12>Continuations
****[#yellow] <i><color #black><size:12>is a data structure that helps to restore the context of a call between calls to a coroutine
****[#yellow] <i><color #black><size:12>Continuations should be a data structure that you benefit from but should not have direct access to it
***[#green] <b><i><color #white><size:22>[[docs/3-programming-languages/Venkat-Subramaniam/Democratization-of-Technology.puml Democratization-of-Technology]]
**[#lightblue] <i><color #blac><size:22>[[docs/3-programming-languages/Venkat-Subramaniam/Virtual-Threads.puml Threads Vs Vritual Threads]]
***[#green] <b><i><color #white><size:12>In Java
***[#green] <b><i><color #white><size:12>Super lightweight
***[#green] <b><i><color #white><size:12>Managed by JVM
***[#green] <b><i><color #white><size:12>Mounting & unmounting
**[#lightblue] <i><color #blac><size:22>[[docs/3-programming-languages/Venkat-Subramaniam/Spearheading-the-future-of-programming-2023.puml Shift In Programming Model]]
***[#green] <b><i><color #white><size:12>From user "Executor services"
****[#yellow] <i><color #black><size:12>to using <b>virtual threads
***[#green] <b><i><color #white><size:12>Executors, not pooled
****[#yellow] <i><color #black><size:12>Don't confuse <b>ExecutorService</b> with <b>pooling</b> they are not same
****[#yellow] <i><color #black><size:12>It makes no sense to <b>pool</b> <b>"virtual threads"</b>, please don't
****[#yellow]:<i><color #black><size:12>Somebody says I need pool of virtual threads. Ask Why?
*<i><color #black><size:12>**Virtual Threads** are like **qtips;** use them & throw around.;
***[#green] <b><i><color #white><size:12>E.g. Mutex (Lock/unlock) data structure
****[#yellow] <i><color #black><size:12>Mounts & unmounts the <b>Thread
*****[#gold] <i><color #black><size:12>to achieves asynchronous behaviour
***[#green] <b><i><color #white><size:12>E.g. Synchronized keyword
****[#yellow] <i><color #black><size:12>Blocks the <b>Thread
*****[#gold] <i><color #black><size:12>to achieves asynchronous behaviour

**[#lightblue] <i><color #blac><size:22>Usage patterns
***[#green] <b><i><color #white><size:12>Where does it make sense to use virtual threads?
****[#yellow] <i><color #black><size:12>When you 've mounting & unmouting <b>"blocking" operations
****[#yellow] <i><color #black><size:12><b>Benefit:</b> "Thread" is not <b>"blocked & waiting"</b> it unmounts & goes on
****[#yellow] <i><color #black><size:12><b>Benefit:</b> with few no. of "Threads" you can get same <b>"Throughput"</b> & more <b>scalability
****[#yellow]:<i><color #black><size:12><b>Venkat Perspective:</b> **"Reactive programming"** scales your **services,** while **"virtual threads"** scale your <b>servers
*<i><color #black><size:12>People say **"virtual threads"** will kill <b>reactive programming
**<i><color #black><size:12><b>Venkat take on it</b> I tend to differ from this idea! <b>Reason, Why?
***<i><color #black><size:12><b>2-Reasons: To Me FRP uses to distinctive benefits:
****<i><color #black><size:12><b>1- You can be asynchronous in your communication
****<i><color #black><size:12><b>2- You can benefit from back pressure
|<#red><i><color #white><size:12><b>1- "Virtual-Thread" addresses the first problem (you can benefit from asynchronous communication)|
|<#red><i><color #white><size:12><b>2- Hence, If you're using "FRP" for [[docs/3-programming-languages/Venkat-Subramaniam/Reactive-Data-Stream.puml "backpressure"]] there is till value in it.|;

***[#green] <b><i><color #white><size:12>Does & don'ts
****[#yellow] <i><color #black><size:12>Don't confuse <b>ExecutorService</b> with <b>pooling</b> they are not same
****[#yellow] <i><color #black><size:12>It makes no sense to <b>pool</b> <b>"virtual threads"</b>, please don't
****[#yellow]:<i><color #black><size:12>Somebody says I need pool of virtual threads. Ask Why?
*<i><color #black><size:12>**Virtual Threads** are like **qtips;** use them & throw around.;
****[#yellow] <i><color #black><size:12>Learn what <b>functions are mounting & unmounting</b> what are not. Otherwise you will not get the <b>"performance"</b> you are expecting
****[#yellow] <i><color #black><size:12>If you've **computationally** intensive **operations/tasks** then there is no use of giving it <b>"virtual threads"</b> because once you assign; it \n<i><color #black><size:12>mounts & holds on to it & also the <b>overhead of mounting and unmounting

**[#lightblue] <i><color #blac><size:22>[[docs/3-programming-languages/Venkat-Subramaniam/Spearheading-the-future-of-programming-2023.puml Programming Models]]
***[#green] <b><i><color #white><size:12>Imperative ----to---> functional ----to----> imperative
****[#yellow] <i><color #black><size:12>In the past, the <b>structure</b> of <color #green><b>imperative style parallel code</b> was very\n<i><color #black><size:12>different from the <b>structure</b> of <b>imperative style sequential code.</b>
****[#yellow] <i><color #black><size:12>In Java 8, the <b>structure</b> of <color #green><b>functional style parallel code</b> is \n<i><color #black><size:12>same as the <b>structure</b> of <b>functional style sequential code.</b>
*****[#gold] <i><color #black><size:12>Thanks to <b>Streams!
****[#yellow] <i><color #black><size:12>In Java 8, the <b>structure</b> of <color #green><b>functional style asynchronous code</b> is \n<i><color #black><size:12>same as the <b>structure</b> of <b>functional style synchronous code.</b>
*****[#gold] <i><color #black><size:12>Thanks to <b>CompletableFuture!
****[#yellow] <i><color #black><size:12>Functional style is great, but working with <b>impurity & exceptions</b> is very difficult\n<i><color #black><size:12>& we loose the <b>elegance & the understanding</b> of it
****[#yellow] <i><color #black><size:12>In Java 21, the <b>structure</b> of <color #green><b>imperative style asynchronous code</b> is \n<i><color #black><size:12>same as the <b>structure</b> of <b>imperative style synchronous code.</b>
*****[#gold] <i><color #black><size:12>Thanks to <b>Virtual-Thread!
*****[#gold] <i><color #black><size:12>CompletableFuture has no <b>future! \n*<i><color #black><size:12>Because "exception handling" in FP is difficult\n*<i><color #black><size:12>Exception handling is imperative style programming idea!
*****[#gold] <i><color #black><size:12>CompletableFuture are great if you are using JDK 20 or less

@endmindmap
