@startmindmap
title =<i><b><u>Goal: of the data-structures is no "incidental data structures"\n<img:images/img_36.png>\t<img:images/img_37.png>
* ==<i><b>[[docs/books/1-books-backlog/data-structure-and-algorithm/data-structures-and-software-design-advice.puml Data Structures & Software Design advice book ("UNIX O/S" book cathedral & bazaar)]]
!theme hacker
*[#darkblue] =<i><color #white>Data-structure:\n<i><color #white>Goal: No "incidental data structures"
**[#lightblue] <i><color #black><size:14>Introduction
***[#green] <b><i><color #white><size:14>Goal
****[#yellow]:<i><color #black><size:14>The **"goal"** of **"no incidental data structures"** refers to a **deliberate and thoughtful approach** to **choosing or designing data structures** in "software development".
<i><color #black><size:14>It emphasizes avoiding accidental, unplanned, or unnecessary data structures that may <b><u>complicate the code, reduce efficiency, or hinder maintainability
<i><color #black><size:14>without a clear purpose.;
**[#lightblue] <i><color #black><size:14>Intentional Design
***[#gold] <i><color #black><size:14>Every **data structure** used in a "software system" should have a clear purpose and relevance to the **"problem domain" or the "specific requirements" of the "system".**
***[#gold] <i><color #black><size:14>This means consciously choosing data structures based on their suitability for the task at hand.
**[#lightblue] <i><color #black><size:14>Minimalism and Simplicity
***[#gold]:<i><color #black><size:14>Avoiding unnecessary complexity by employing the **"simplest data structure"** that adequately fulfills the <b>"requirements".
<i><color #black><size:14>This prevents the introduction of overly intricate or convoluted structures that may hinder understanding and maintenance of the codebase.;
**[#lightblue] <i><color #black><size:14>Performance Consideration:
***[#yellow]:<i><color #black><size:14>Opting for data structures that efficiently support the required operations. Choosing appropriate structures based on the expected usage patterns
<i><color #black><size:14>**(e.g., considering time complexity for insertions, deletions, lookups)** helps in achieving optimal performance.;
**[#lightblue] <i><color #black><size:14>Maintainability and Readability:
***[#yellow]:<i><color #black><size:14>Ensuring that the chosen data structures contribute to code that is easy to read, understand, and maintain. Using data structures that align with
<i><color #black><size:14>best practices and widely understood conventions can facilitate collaboration among developers and future modifications.;
**[#lightblue] <i><color #black><size:14>Avoiding Redundancy:
***[#yellow] <i><color #black><size:14>Eliminating redundant or duplicated data structures that serve the same purpose, leading to increased memory consumption and potential inconsistency in the <b>system.
**[#lightblue] <i><color #black><size:14>Adaptability &\n<i><color #black><size:14>Extensibility:
***[#yellow] <i><color #black><size:14>Selecting data structures that offer adaptability and extensibility to accommodate potential changes or expansions in the system's requirements\n<i><color #black><size:14>without the need for <b>extensive rework.

**[#lightblue] <i><color #black><size:14>Summary
***[#yellow] <i><color #black><size:14>For instance, rather than implementing a complex, custom data structure when a standard one **(like arrays, lists, maps, or trees)** suffices, the principle of \n<i><color #black><size:14>**"no incidental data structures"** suggests using these **"established structures"** to ensure code simplicity and maintainability unless there's a <b>"clear & justifiable"\n<i><color #black><size:14>need for a <b>"specialized structure".
***[#yellow] <i><color #black><size:14>Overall, this principle emphasizes thoughtful and purposeful selection or creation of data structures in software development to promote \n<i><color #black><size:14><b>simplicity, efficiency, and maintainability in "codebases".
@endmindmap
