@startmindmap
title =<i><b><u><size:18>Architecting Distributed Cloud Apps \n|<img:images/img_374.png>|<img:images/img_375.png{scale=.91}>|\n<i><b><u><size:18>Instructor Jeffrey Richter is Microsoft Most Valuable Professional (MVP)
* <i><b>[[docs/3-programming-languages/Venkat-Subramaniam/Core-Software-design-principles-for-software-developers.puml Core Software design principles for software developers by Venkat Subramaniam]]
** <i><b>[[docs/3-programming-languages/Venkat-Subramaniam/Designing-Reactive-Systems.puml Designing Reactive Systems by Venkat Subramaniam]]

caption |<img:images/img_606.png>|<img:images/img_607.png>|\n|<img:images/img_361.png>|<img:images/img_382.png>|

!theme hacker

*[#darkblue] <color:white><i>Architecting Distributed\n<color:white><i>Cloud Apps
**[#lightblue]:<i><color #black><size:12>Fundamentals
|<img:images/img_270.png{scale=.504}>|
|<img:images/img_366.png{scale=.2109}>|
|<#blue><i><size:15>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_377.jpg Most Popular Cloud Services in 2023, click]]|
|<img:images/img_272.png{scale=.5}>|
|<#blue><i><size:15>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_387.png Monitoring Services Across Cloud click]]|
|<#blue><i><size:15>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_362.png Software Defined Networking (SDN & IaC)]]|
|<#blue><i><size:15>[[docs/books/1-books-backlog/operating-system/images/img_12.png IaC (Kubernetes,]] [[docs/3-devops/devops-plantuml-mindmap/Terraform.puml Terraform,]] [[docs/3-devops/devops-plantuml-mindmap/Pulumi.puml Pulumi)]]|
|<#blue><i><size:15>[[docs/cloud-computing/images/cloud-pyramid.png Cloud Pyramid]]|
|<#blue><i><size:12><color #white>Casado shares his thoughts on the future of \n<i><size:12><color #white>"infrastructure" as well as views on how 3 important \n<i><size:12><color #white>trends coming together: \n<i><size:12><color #white>1- hardware to software; \n<i><size:12><color #white>2- software to services; \n<i><size:12><color #white>3- & finally, the rise of the developerâ€¦|;

***[#green] <i><color #white><b><size:12>Introduction
****[#a]:<i><color #black><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_363.png Cloud Apps: are fundamentally different than traditional apps]]** that run on the **[[docs/3-programming-languages/Venkat-Subramaniam/images/img_666.png desktop, in a browser, or on a mobile device.]]** Whether you
<i><color #black><size:12>are **designing apps** for **Microsoft Azure, AWS,or Google or other platforms,** absorbing the **principles** contained here in is a must
<i><color #black><size:12><b>before writing the first line of code.;
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_667.png Why Cloud apps?]]
****[#grey] <i><color #white><b><size:12>[[https://youtu.be/IBTpNptxYF4 Phases of Cloud Adoption]] \n*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_668.png Embracing failure]]
****[#green]:*<i><color #white><b><size:12>[[https://rescale.com/blog/cloud-3-0-the-rise-of-big-compute/ Cloud 1.0 ---is-> SaaS, Cloud 2.0 ---is-> Big Data, Cloud 3.0 ---is-> Big Compute]]
====
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_414.png SaaS (Cloud 1.0) transforming the "delivery & business model", &]]
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_415.png Big Data (Cloud 2.0) unlocking the "value" in "massive data sets".]]
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_416.png Now, "Big Compute", built on these critical foundational layers, is at an]]
<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_398.png inflection point & poised to be the third.]];
*****[#a]:* <i><color #white><b><size:12>**Cloud 1.0:** SaaS <color #black>(In this model we are not concerned about literally anything.
<i><color #white><b><size:12>The only thing that we need to work on is the code & just a look at the "bill".)
* <i><color #white><b><size:12>**Cloud 2.0:** Big Data <color #black>(removed constraints on "data" & transformed major
<i><color #white><b><size:12>"enterprise software categories")
* <i><color #white><b><size:12>**Cloud 3.0:** Big Compute <color #black>(eliminates constraints on "compute hardware" &
<i><color #white><b><size:12>provides the ability to scale computational workloads seamlessly on
<i><color #white><b><size:12>workload-optimized infrastructure configurations without sacrificing performance.);
*****[#a] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_398.png Big Compute]]
****** <i><color #black><size:12>The specialized capabilities of these processors is critical for specific Big Compute workloads \n<i><color #black><size:12>that need to be mapped to the right architectures, depending on their algorithms & implementation.

****[#a]:|<#grey><b><i><color #black><size:12>Synthesis: [[docs/3-programming-languages/Venkat-Subramaniam/images/img_363.png Reason-1]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_364.png Reason-2]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_365.png Reason-3]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_271.png Reason-4]], [[docs/cloud-computing/Cloud-Native.puml Cloud Native]],|
|<#red><b><i><color #black><size:12>Anti-synthesis: [[https://www.youtube.com/watch?v=O66xpoRpyRk&ab_channel=CloudComputingInsider Why Companies are Kicking Cloud to the Curb]] \n<b><i><color #black><size:12>Anti-synthesis: [[https://www.youtube.com/watch?v=4Wa5DivljOM&ab_channel=Fireship Why you're addicted to cloud computing]]|;

*****[#a]:<b><i><color #black><size:12>What you are paying for in cloud is convenience not small apex or little upfront infra cost.
**<b><i><color #black><size:12>In other words; [[docs/3-programming-languages/Venkat-Subramaniam/images/img_572.png Bare Metal]] - [[docs/3-programming-languages/Venkat-Subramaniam/images/img_686.png Pain]] = [[docs/3-programming-languages/Venkat-Subramaniam/images/img_687.png AWS]]
**<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_687.png AWS]] - Pain = [[docs/3-programming-languages/Venkat-Subramaniam/images/img_688.png Vercel]] & Netlify|;

****[#a] <b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/how-to-adopt-cloud-native.adoc How do we transform a system to be Cloud Native?]] A lot of Companies are at Step-4 due to the "complexity" & the required "DevOps talent"

***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_367.png Orchestrators & Clusters]] \n*<i><color #white><b><size:12>[[https://www.youtube.com/watch?v=LkJr0Ld85AE&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=4&ab_channel=JeffreyRichter 5-minute video]]
****[#a]:<i><color #black><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_440.png Purpose of an Orchestrator:]]** Infrastructure/Platform/Containers/Functions as a Service aka Orchestrators
*<i><color #black><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_669.png Manage a cluster's  (set of PC/VMs)]]** lifecycle, networking, health, upgrades, scaling, & deploys/runs service code.
==<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_440.png Automation vs. Orchestration]]==
<i><color #black><size:12>**Automation:** refers to **automating** a single **process or a small number of related tasks** (e.g., deploying an app)
<i><color #black><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_440.png Orchestration:]]** refers to **managing** multiple **automated tasks** to **create a dynamica workflow** (e.g., deploying an app, connecting it to a network,
<i><color #black><size:12>& **integrating** it with other <b>systems);
****[#a] <i><color #black><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_386.png Kubernetes Tool Ecosystem]] & [[docs/3-programming-languages/Venkat-Subramaniam/images/img_395.png Kubernetes Vs. Docker]]

***[#green]:*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/region-availability-zone-and-fault-domain.drawio.png Region, availability zone and fault domain]]
====
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_399.png Global Datacenters]]
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_400.png Region = Independent geographic area]] click me
**<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_400.png Contains at least 2-availability zones (except for Osaka region)]] click me
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_400.png Availability Zones = Multiple isolated location /data-centers within a region]]
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_400.png Fault Domains]];
****[#a]:<i><color #black><size:12>**Distributed [[docs/3-programming-languages/Venkat-Subramaniam/images/img_359.png Cloud]] Apps:** are largely about:
*<i><color #black><size:12><b>Scalability (auto-scaling)
*<i><color #black><size:12><b>High availability;
*****[#darkorange]:<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/system-design-availability-throughput-scalability.adoc System Design:]] gif
<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/system-design-availability-throughput-scalability.adoc 1- High availability,]]
<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/system-design-availability-throughput-scalability.adoc 2- High Throughput,]]
<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/system-design-availability-throughput-scalability.adoc 3- High Scalability]];
****[#a] <i><color #black><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_390.png Cloud hidden cost]] & [[docs/3-programming-languages/Venkat-Subramaniam/images/img_391.png 2-Decades of Cloud Evolution]] & [[docs/cloud-computing/images/IaaS,PaaS,SaaS.png How we reached here?]]
****[#a] <i><size:12><b>[[docs/cloud-computing/Cloud-Design-Patterns.puml Design for Resilience & Fault Tolerance]]
*****[#darkorange] *<i><size:12>**Cloud-native apps** are **designed** to be **resilient to failures** & can automatically **recover** from them \n*<i><size:12>Use **[[docs/cloud-computing/Cloud-Design-Patterns.puml fault-tolerant design patterns]]** & consider implementing <b>[[docs/cloud-computing/Cloud-Design-Patterns.puml circuit breakers & retry mechanisms]]

***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_670.png Services & Service-Based Architecture]]
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_271.png Monolith vs. Microservices]] \n*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_672.png Microservices Myths]]

****[#grey]:<b><i><color #black><size:12>[[https://www.youtube.com/watch?v=eWljhk1RvCM&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=21&ab_channel=JeffreyRichter What does it takes to turn a "method call" into a "network call"? & many of the issues related to this effort?]]
*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_691.png Networking--Service APIs--Turning a monolith into a microservice]];

****[#a]:<i><color #black><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_671.png Four reasons to split monolith to Microservices:]]**
<i><color #black><size:12><b>1- Scale independently (balance cost with speed)
<i><color #black><size:12><b>2- Different technology stack
<i><color #black><size:12><b>3- 2-plus clients (clients adopt new features at will)
<i><color #black><size:12><b>4- Conflicting Dependencies;
*****[#yellow]:*<i><color #black><size:12><b>Service Discovery
====
*<i><color #black><size:12>When your **software architecture is about microservices,** then **containers** are a good choice.
*<i><color #black><size:12>When you are using old **monolithic applications** then **VMs** are not a bad option.;

****[#a]:*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_383.png Latency Number you should know]] & [[docs/3-programming-languages/Venkat-Subramaniam/images/img_384.png Commonly used tech-stack for microservices]]
*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_388.png How Data is sent across servers]]
*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/gif/session-JWT-Token-SSO-and-OAuth-2-0.adoc How session, JWT, Token, SSO, & OAuth-2.0 works?]] & [[docs/3-programming-languages/Venkat-Subramaniam/images/img_394.png Top 4 Most used Authentication Mechanisms]]
*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_392.png HTTP 1.0 -> HTTP 1.1 -> HTTP 2.0 -> HTTP 3.0 (QUIC)]];

***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/system-design-availability-throughput-scalability.adoc Service-Level Agreements (SLAs) & Dependent Services]]
****[#a] <i><color #black><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_673.png Part-1]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_674.png 2]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_675.png 3]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_676.png 4]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_676.png 5]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_677.png 6]]
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_440.png Auto Scaling]] \n*<i><color #white><b><size:12>[[https://www.youtube.com/watch?v=on1153sF9iY&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=9&ab_channel=JeffreyRichter 5-min video]]
****[#darkorange] <i><color #black><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_440.png has 3-techniques]]**
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_678.png 12-Factor Services & Apps]]
****[#a] <i><color #black><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_679.png Part-2]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_680.png Part-3]]
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_368.png Containers]]
****[#a] *<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_369.png Docker Architecture]] \n*<i><color #black><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_370.png Image Vs Container]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_681.png Part-2]] \n*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_371.png VM Vs. Container]]

***[#green] <i><color #white><b><size:12>Why Containers?
****[#a] <i><color #black><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_372.png VM vs. Containers]]** <b>size, boot-up time & memory usage

****[#black] <i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/isolation-vs-density.drawio.png Isolation vs. Density]] \n*<i><color #black><size:12><b>[[https://www.youtube.com/watch?v=C6pyfrwk2uo&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=12&ab_channel=JeffreyRichter 5-min video]]
*****[#yellow] <i><color #black><size:12>The relationship between **isolation & density** using a spectrum of <b>technologies: \n<i><color #black><size:12><b>""PCs, Virtual Machines, Hyper-V Containers, Containers, & Processes.""

****[#darkorange] <i><color #black><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_376.png Container Vs. O/S windows, Linux & Mac compatability]]**
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/OS-Kernel-and-container-images.drawio.png Containers & Operating Systems]]
***[#green] <i><color #white><b><size:12>Orchestrators & Containers
****[#a] <i><color #black><b><size:12>[[https://www.youtube.com/watch?v=BZgB3fGXRHc&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=14&ab_channel=JeffreyRichter Orchestrator starts containers on cluster's PCs/VMs]] 5-min video

***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_373.png Continuous Integration & Continuous Deployment]] \n*<i><color #white><b><size:12>[[https://www.youtube.com/watch?v=WqPSstx41wY&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=15&ab_channel=JeffreyRichter 5-minute video]]
****[#darkorange] <i><color #black><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/conventional-SDLC-vs-DevOps-vs-NoOps.adoc Conventional SDLC vs. DevOps Vs. NoOps]] gif
**[#lightblue] *<i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_362.png Networking Communication]] \n*<i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_378.png Multi-Cloud Networking Cheatsheet]]

***[#green] <i><color #white><b><size:12>Introduction
****[#a]:<i><color #black><size:12>**Microservices** use **[[docs/3-programming-languages/Venkat-Subramaniam/images/img_362.png network]]** to **communicate with each other,** but architecting a robust microservice based app is not as simple as replacing <b>function calls (source-level decoupling)
<i><color #black><size:12>with **network calls.** Concepts such as **API versioning, client retires & idempotence** are critical to <b>distributed cloud architecture.;
***[#green] <i><color #white><b><size:12>Networking
****[#a] <i><color #black><size:12><b>Virtual Networks
*****[#a]:<i><color #black><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_572.png Networking:]]** is the **thing** which **decides** the **security** of your **application architecture** as well as whether your **application can scale**
<i><color #black><size:12>& how do you **design** the **traffic, security groups, or say firewalls & the routing decisions** you take.;
*****[#a] *<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_406.png VPCs]] \n*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_407.png Subnets]]
******[#a] *<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_441.png What is VPC & How it Works? Part-1]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_442.png Part-2 (Two Types of VPC)]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_443.png Part-3 AWS-VPC Peering (2 VPC within a Region)]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_444.png Part-4 AWS N/W ACL's inside VPC]]
******[#darkorange]:*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_401.png What are services, regions & Availability zones (AZ) & how they map to each other]]
*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_401.png What is AWS Account, Users & Services Scope]];
*******[#black]:*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_402.png 1- Compute Services &]] [[docs/3-programming-languages/Venkat-Subramaniam/images/img_403.png 1- Compute & Analytics]]
*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_404.png 2- Storage & Database Services]]
*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_405.png 3- Network & Management &]] [[docs/3-programming-languages/Venkat-Subramaniam/images/img_405.png 4- App & Dev]];
*****[#a] *<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_408.png Classless Inter-Domain Routing (is "CIDR")]] \n*<i><color #black><size:12><b>[[https://www.youtube.com/watch?v=O3fgul-fJCk&ab_channel=AWSTrainingCenter Classless means (no A, B, C & D class like we have in "IPV-4", its "32-bit")]] video
****[#a] <i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_408.png Traffic Routing]]
*****[#a] *<i><color #black><size:12><b>CDNs \n*<i><color #black><size:12><b>DNS Services (Translate domain names to IPs)
******[#gold] <i><color #black><size:12><b>Example: \n<i><color #black><size:12><b>Designing a social website like Facebook.
*******[#darkorange]:*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_409.png Without Cloud computing]]
*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_410.png With Cloud computing]]
**<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_411.png When added more AWS services like (App services)]]
**<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_412.png When added more AWS services like (Security services)]]
**<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_413.png When added more AWS services like (Development & DevOps services)]];
***[#green] <i><color #white><b><size:12>[[docs/books/1-books-backlog/DBMS/8-Fallacies-of-Distributed-Systems.puml 8 Fallacies of Distributed Computing]]
****[#darkorange] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_682.png More on 8 Fallacies of Distributed Computing]] \n*<i><color #white><b><size:12>[[https://www.youtube.com/watch?v=-Ed6Ny9iFeg&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=16&ab_channel=JeffreyRichter 5-minute video]]
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_683.png Service Endpoints]] \n*<i><color #white><b><size:12>[[https://www.youtube.com/watch?v=6BaoAZLguYo&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=17&ab_channel=JeffreyRichter 5-minute video]]
****[#grey] <i><color #black><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_684.png Scalability & availability]] \n*<i><color #white><b><size:12>[[https://www.youtube.com/watch?v=6BaoAZLguYo&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=17&ab_channel=JeffreyRichter 5-minute video]]
*****[#yellow] <i><color #black><size:12>How **service's** listen for "incoming requests" and how to run multiple services **(each with their own endpoint)** so that the service remains scalable and highly-available when facing <b>failures.
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_685.png Proxies]]

****[#a]:<i><color #black><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_376.jpg Forward vs. Reverse Proxy]] & [[docs/3-programming-languages/Venkat-Subramaniam/images/img_685.png More on proxy]]
*<i><color #white><b><size:12>[[https://www.youtube.com/watch?v=0OukrSld3sY&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=18&ab_channel=JeffreyRichter 5-min video]]
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_388.png How Data is transmitted between Servers (Apps)]];

*****[#yellow] <i><color #black><b><size:12>""What a (forward) proxy and a reverse proxy are and the various things that they can be used for.""
****[#a] <i><color #black><b><size:12>[[https://www.youtube.com/watch?v=4zuHPMW-faY&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=19&ab_channel=JeffreyRichter Cluster DNS & service reverse proxy]] \n*<i><color #black><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_689.png Part-2]]
*****[#yellow] <i><color #black><size:12>The flow of network traffic as a client talks to a service via a load balancer (reverse proxy), a domain name service (DNS), and addition reverse proxies to get to a single service instance.
****[#a] <i><color #black><b><size:12>[[https://www.youtube.com/watch?v=e6aFk2NgGtw&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=20&ab_channel=JeffreyRichter Reverse proxy load balancer service probes]] \n*<i><color #black><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_690.png Part-2]] must watch 5-min video
*****[#yellow] <i><color #black><size:12>How a reverse proxy load balancer detects which service instance health indicating which service instances it can and cannot direct traffic to.

***[#green] <i><color #white><b><size:12>Putting it all together
***[#green] <i><color #white><b><size:12>Orchestration & Load Balancing
***[#green] <i><color #white><b><size:12>Connecting Microservices
***[#green] <i><color #white><b><size:12>[[https://www.youtube.com/watch?v=jXAUAWPhIcc&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=22&ab_channel=JeffreyRichter API Versioning]] \n*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_692.png Part-2]]
****[#gold] <i><color #black><size:12>""The importance of versioning service APIs correctly in order to maintain backward compatibility.""
****[#darkorange] <i><color #black><size:12>Designing & Versioning <b>HTTP/REST APIs; & [[docs/3-programming-languages/Venkat-Subramaniam/gif/Common-HTTP-Verbs.adoc Common HTTP Verbs]] gif
****[#darkorange] <i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/gif/API-vs-SDK.adoc API vs SDK]] gif [[a Webservice]]
****[#a]:*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_397.png What does API gateway do?]] & [[docs/3-programming-languages/Venkat-Subramaniam/gif/3-API-gateway-use-cases.adoc 3 API gateway use cases]]
*<b><i><color #black><size:12>[[https://www.youtube.com/embed/3t7pMx35Reg APIs Vs. Events | Can they coexist? | API First or Event First]];
*****[#a] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/webservice.puml Webservice?]]
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_46.png Network API Contracts]]
****[#yellow] <i><color #black><b><size:12>""The importance of defining a formal networking API contract.""
****[#a] <i><color #black><b><size:12>[[https://www.youtube.com/watch?v=iEiZyi7BBoI&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=23&ab_channel=JeffreyRichter Part-1]] video, [[docs/3-programming-languages/Venkat-Subramaniam/images/img_693.png Part-2]] image

***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_694.png Beware of Leaky RPC-Like Abstractions]] \n*<i><color #white><b><size:12>[[https://www.youtube.com/watch?v=uE16hkoHcYE&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=24&ab_channel=JeffreyRichter 2-min video]]
****[#yellow] <i><color #black><b><size:12>""The perils of using a leaky remote procedure call (RPC) abstraction in your code to make a network request "look like" a method call.""
***[#green] <i><color #white><b><size:12>[[https://www.youtube.com/watch?v=gH_hwwn2yDk&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=25&ab_channel=JeffreyRichter Retrying Failed Network Operations]]
****[#yellow] <i><color #black><b><size:12>""How to make network communication fault tolerate by implementing exactly-once semantics using client side retries and server-side idempotency.""
****[#a] <i><color #black><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_695.png Fault-Tolerance--Exactly once semantics via retries & idempotency]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_696.png Part-2]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_697.png 3]] \n*<i><color #black><b><size:12>[[https://www.youtube.com/watch?v=gH_hwwn2yDk&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=25&ab_channel=JeffreyRichter 10-min video]]
***[#green] <i><color #white><b><size:12>Implementing Operations Idempotently
****[#yellow]:*<i><color #black><size:12>""How to make network communication fault tolerate by implementing exactly-once semantics using client side retries and server-side <b>idempotency.""
*<i><color #black><size:12>""**Idempotent:** For the same input **function** always produces same <b>output."";

**[#lightblue] <i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_698.png Messaging]]
***[#green] <i><color #white><b><size:12>Introduction
****[#yellow]:<i><color #black><size:12>**Queues:** are used to facilitate reliable **message-based communication** between **services.** Learn what **queues** are, why **messaging communication** with **queues** is frequently preferable to <b>network
<i><color #black><size:12>**communication,** & what implications **queues** 've for the <b>design & implementation of distributed cloud apps.
====
*<i><color #black><size:12>""Benefits of using a **messaging pattern** as opposed to <b>normal networking communication."";

***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_698.png Messaging Communication]]
****[#a] <i><color #white><b><size:12>[[https://www.youtube.com/watch?v=C26paSeSQD8&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=26&ab_channel=JeffreyRichter 3-min video]]
****[#a] <i><color #white><b><size:12>[[https://www.youtube.com/watch?v=C26paSeSQD8&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=26&ab_channel=JeffreyRichter I think Here virtual threads now can help or 've provided improvements in this situation or scenario]]
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_699.png Messaging with Queues]]
****[#a] <i><color #white><b><size:12>The flow of a bunch of services using messaging. \n*<i><color #white><b><size:12>[[https://www.youtube.com/watch?v=Tu9WGaePtBA&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=27&ab_channel=JeffreyRichter Must watch video]] 5-minute
*****[#a] |<#red><i><color #white><b><size:12>[[https://www.youtube.com/watch?v=Tu9WGaePtBA&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=27&ab_channel=JeffreyRichter Cloud or Messaging with Queues]]|<#grey><i><color #white><b><size:12>[[https://www.youtube.com/watch?v=eWljhk1RvCM&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=21&ab_channel=JeffreyRichter Cloud or Messaging without Queues]]|
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_700.png Fault-Tolerant Messaging Processing]]
****[#a] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_700.png How "service instances" process queue "messages" in a fault-tolerant fashion.]]
*****[#a] |<#red><i><color #white><b><size:12>[[https://www.youtube.com/watch?v=XndpZCyRIXw&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=28&ab_channel=JeffreyRichter Cloud or Messaging with Queues Part-2]]|\n*<i><color #white><b><size:12>5-min video must watch
***[#green] <i><color #white><b><size:12>More About Queues
****[#a] <i><color #white><b><size:12>Additional features that are frequently available with queue systems.

**[#lightblue] <i><color #black><size:12>Versioning Services
***[#green] <i><color #white><b><size:12>Introduction
****[#yellow]:<i><color #black><size:12>**Services:** inevitably evolve, which means an important consideration when deploying them is how to version them without disrupting service. Learn the ins & outs of versioning the services that
<i><color #black><size:12>comprise cloud apps & how to protect the **configuration data** that accompanies them.;
***[#green] <i><color #white><b><size:12>Service-Update Options
***[#green] <i><color #white><b><size:12>Comparing Service-Update Options
***[#green] <i><color #white><b><size:12>Two-Phase Updates
***[#green] <i><color #white><b><size:12>Shutting Down Service Instances
***[#green] <i><color #white><b><size:12>Service Configuration & Secrets
***[#green] <i><color #white><b><size:12>Cryptographic Message Syntax

**[#lightblue] <i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/system-design-availability-throughput-scalability.adoc Leader Election]]
***[#green] <i><color #white><b><size:12>Introduction
****[#yellow]:<i><color #black><size:12>**Leader election:** is a pattern that is commonly used in **distributed cloud apps.** The purpose is to allow one service instance to coordinate tasks among other service instances, & to easily be
<i><color #black><size:12>replaced if it goes out of scope down. Learn about the leader election pattern & understand <b>how & why to implement it.;
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/system-design-availability-throughput-scalability.adoc What is leader election, & why would I use it?]]
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/system-design-availability-throughput-scalability.adoc Leader election using "leases"]]
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/system-design-availability-throughput-scalability.adoc Leader election using "Queue Messaging"]]

**[#lightblue] <i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_379.png Data Storage]]
***[#green] <i><color #white><b><size:12>Introduction
****[#yellow]:<i><color #black><size:12>Being **reliable & scalable services** that **manage state** is **exponentially more difficult** than **building stateless services.** Here follows the problems that you will encounter, solutions to those
<i><color #black><size:12>problems & patterns that will help you implement them.;
***[#green] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_379.png Data Storage Considerations]]
****[#a] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_393.png Types of Data Storage (from ground)]]
***[#green] <i><color #white><b><size:12>Data Temperature


***[#green] <i><color #white><b><size:12>Performance Optimization
****[#a] *<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_385.png Caching]] & \n*<i><color #white><b><size:12>CDNs
*****[#darkorange]:*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/how-does-redis-persist-data.adoc How does Redis persist data? gif]]
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_380.png Where do we cache data?]]
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_381.png Top 5 Caching strategies]]
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_385.png Caching complete mind-map]]
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/How-can-Cache-Systems-go-wrong.adoc How can Cache Systems go wrong? (cache challenges)]] gif;

***[#a] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_379.png File & Object Storage]]
****[#darkorange]:*<i><color #white><b><size:12>How to improve performance of clientâ€™s accessing these documents by using a Content Delivery Network (CDN).
*<i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/gif/blob-and-object-store-use-cases.adoc File & Object Storage top six (6) use-cases]] gif
*<i><color #white><b><size:12>[[docs/cloud-computing/AWS-Cloud/image-2023-03-05-20-07-51-822.png Performance comparison of storage types]]
*<i><color #black><b><size:12>[[https://www.youtube.com/embed/6vNC_BCqFmI AWS Storage - EBS vs S3 vs EFS]] video;

***[#a] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_379.png Database Storage]]
****[#darkorange] <i><color #white><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_380.jpg 8 data-structures that power "Modern Database"]]
***[#a] <i><color #white><b><size:12>Data Partitioning
****[#a] <i><color #white><b><size:12>âž¢ Data is partitioned for size, speed or both \n<i><color #white><b><size:12>âž¢ Each partitionâ€™s data is replicated for reliability \n<i><color #white><b><size:12>âž¢ How you partition your data is your choice & its super important.

***[#a] <i><color #white><b><size:12>[[docs/cloud-computing/images/data-consistency.png Data Consistency]] <size:9> click me
****[#darkorange]:<i><color #white><b><size:12>Strong & Weak data consistency, the CAP theorem, & apology-based computing.
*<i><color #white><b><size:12>[[docs/cloud-computing/images/consistency-or-availabilty-which-is-better.png Data Consistency or avail-ability which is better?]]
*<i><color #white><b><size:12>[[docs/cloud-computing/images/implementing-eventual-consistency.png Implementing Eventual Consistency]];

***[#green] <i><color #white><b><size:12>Patterns
****[#yellow] <i><color #black><size:12><b>CQRS Pattern: </b> separates **data modifications** (commands) from <b>data queries.
****[#yellow] <i><color #black><size:12><b>Event-Sourcing Pattern
*****[#a]:<i><color #black><size:12><b>A way of storing "immutable" (big) data & then producing "views" over this "data".
*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/gif/CRUD-Vs-Event-Sourcing.adoc CRUD Vs. Event-Sourcing]] gif
*<i><color #black><size:12><b>[[docs/cloud-computing/images/event-sourcing.png Event-Sourcing]]
*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/gif/How-do-we-incorporate-Event-Sourcing-into-the-systems.adoc How do we incorporate Event Sourcing into the systems?]] gif;

****[#yellow] <i><color #black><size:12><b>Eventual Consistency
****[#yellow] <i><color #black><size:12><b>Saga </b>for dealing with **eventual consistency** which compromises **atomicity** for **availability.** (see book fundamentals of software architecture patterns) these are very easy
***[#green] <i><color #white><b><size:12>Data Concurrency & Versioning
***[#green] <i><color #white><b><size:12>Optimistic Concurrency
***[#green] <i><color #white><b><size:12>Versioning Data Schemas
***[#green] <i><color #white><b><size:12>Backup & Restore
***[#green] <i><color #white><b><size:12>Recovery & Restore
***[#green] <i><color #white><b><size:12>Recovery Point & Time Objectives
***[#green] <i><color #white><b><size:12>Disaster Recovery
***[#green] <i><color #white><b><size:12>Data Encryption
****[#a] <i><color #white><b><size:12>In-transit Encryption
****[#a] <i><color #white><b><size:12>At-rest Encryption

@endmindmap
