@startmindmap
title =<i><u><size:18>The art of UNIX Programming \n<i>By Eric S Raymond
!theme hacker

*[#darkblue] <color #white><i>The art of UNIX\n<color #white><i>Programming
**[#lightblue] <i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_701.png The Durability of Unix (O/S)]]
***[#green] <size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_701.png Open-Source Software]]
***[#green] <size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_701.png Open-Source Community]]
***[#green] |<#grey><b><i><size:12>[[docs/books/1-books-backlog/operating-system/Unix-Architecture.puml Unix Architecture in detail]]|
****[#grey] *<b><i><color #black><size:12>[[https://www.youtube.com/watch?v=tc4ROCJYbm0&ab_channel=AT%26TTechChannel UNIX: AT&T Archives: The UNIX Operating System]] 27-minute \n<b><i><color #white><size:12>[[https://www.youtube.com/watch?v=tc4ROCJYbm0&ab_channel=AT%26TTechChannel First 5 minutes on software requirements with ulmitate explanation why & when we develop software]]
****[#grey] *<b><i><color #black><size:12>[[https://www.youtube.com/watch?v=XvDZLjaCJuw&list=LL&index=3&t=283s&ab_channel=AT%26TTechChannel UNIX: Making Computers Easier To Use -- AT&T Archives film from 1982, Bell Laboratories]] 20-minute \n<b><i><color #black><size:12>[[https://www.youtube.com/watch?v=XvDZLjaCJuw&list=LL&index=3&t=283s&ab_channel=AT%26TTechChannel First 5 minutes on software requirements with outstanding example]]

**[#lightblue] |<#red><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_702.png The Lessons of Unix Can Be Applied Elsewhere]]|
**[#lightblue] |<#red><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_703.png Basics of Unix (is O/S) Philosophy]]|
***[#green] <size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_257.png Data-structures & algorithms advice]]
***[#green] <size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_707.drawio.png More on UNIX (O/S) philosophy]]
***[#green] <size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_285.png Attitude Matters Too]]

***[#green] |<#red><i><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_257.png Rules of Unix (O/S) Philosophy]]|
****[#a]:==|<#red><size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_707.drawio.png More on UNIX (O/S) Philosophy]]|==
|<#grey><size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_704.png 1- Rule of Modularity: Write simple parts connected by clean interfaces.]]|
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_705.png 2- Rule of Clarity: Clarity is better than cleverness.]]
|<#grey>*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_706.png 3- Rule of Composition: Design programs to be connected with other programs.]]|
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_707.png 4- Rule of Separation: Separate policy from mechanism; separate interfaces from engines.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_708.png 5- Rule of Simplicity: Design for simplicity; add complexity only where you must.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_709.png 6- Rule of Parsimony: Write a big program only when it is clear by demonstration that nothing else will do.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_710.png 7- Rule of Transparency: Design for visibility to make inspection and debugging easier.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_711.png 8- Rule of Robustness: Robustness is the child of transparency and simplicity.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_712.png 9- Rule of Representation: Fold knowledge into data, so program logic can be stupid and robust.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_713.png 10- Rule of Least Surprise: In interface design, always do the least surprising thing.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_714.png 11- Rule of Silence: When a program has nothing surprising to say, it should say nothing.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_715.png 12- Rule of Repair: Repair what you can — but when you must fail, fail noisily and as soon as possible.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_716.png 13- Rule of Economy: Programmer time is expensive; conserve it in preference to machine time.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_717.png 14- Rule of Generation: Avoid hand-hacking; write programs to write programs when you can.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_718.png 15- Rule of Optimization: Prototype before polishing. Get it working before you optimize it.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_719.png 16- Rule of Diversity: Distrust all claims for “one true way”.]]
*<size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_720.png 17- Rule of Extensibility: Design for the future, because it will be here sooner than you think.]]
==|<#red><size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_721.png The Unix Philosophy in One Lesson]]|<#grey><size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_285.png Attitude Matters Too]]  |==;
*****[#lightblue] |<img:images-reuseable/41-Unix-operating-system-design.png{scale=.7}>|<img:images-reuseable/5-cocentric-circles-or-layer.png{scale=.67}>|

**[#lightblue] <i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_701.png Those who cannot remember the past are]]\n<i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_701.png condemned to repeat it.]] ""by GeorgeSantayana""
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_722.png Exodus: 1971–1980]]
****[#yellow] <b><i><size:12>It would only take about 5-years for C to drive "machine assemblers" almost completely out of use. \n<b><i><size:12>By the early 1990s C and C++ would dominate not only "systems" but "application" programming; \n<b><i><size:12>by the late 1990s all other conventional compiled languages would be effectively obsolete.
*****[#gold] <i><size:12>Now in **2024 Rust & golang** are replacing <b>C, C++ \n<i><size:12>especially in Linux O/S kernel. Linus Torvald himself said this.

***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_722.png Between 1991 and 1995]]
****[#darkorange] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_722.png In 1995, Linux O/S found its killer app: Apache, the open-source webserver.]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_722.png The Lessons of Unix History]]
****[#darkorange] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_722.png The lesson for the future is that]]
****[#darkorange] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_722.png Another lesson is this]]
****[#darkorange] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_722.png Finance, Economy?]] last two paragraph!
*****[#a] <b><i><size:12>[[https://www.youtube.com/watch?v=ElcmUYT9V54&t=1811s Make Money with Open-Source?]] 1-hour video YouTube
***[#a] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_722.png The "application" of these "lessons" with respect to "software technologies"]] \n<b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_722.png other than "Unix" is left as an easy exercise for the reader.]]
****[#darkorange] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_722.png Will do my research]] \n*<b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_741.png Google Bard]] respone\n*<b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_742.png ChatGPT]] respone
**[#lightblue] <i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_723.png Software Is a Many-Layered Thing]]
***[#a] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_723.png Top-Down versus Bottom-Up]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_724.png Glue Layers]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_724.png Unix and Object-Oriented Languages]]
**[#lightblue] <i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_725.png Chapter 6. Transparency]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_726.png Designing for Maintainability]]
**[#lightblue] <i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_727.png Chapter 7. Multiprogramming Separating Processes to Separate Function]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_728.png Separating Complexity Control from Performance Tuning]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_729.png Threads — Threat or Menace?]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_730.png Process Partitioning at the Design Level]]

****[#darkorange]:<b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_730.png 1- Threads,]]
<b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_730.png 2- Remote-procedure-call interfaces,]]
<b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_730.png 3- Heavyweight object-oriented design (BUFD) is especially dangerous]]
<b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_730.png If you are ever invited onto a project that is supposed to feature (attribute) all three,]]
<b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_730.png ﬂeeing in terror might well be an appropriate reaction.]];

**[#lightblue] <i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_731.png Chapter 12. Optimization]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_732.png Measure before Optimizing]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_733.png Nonlocality Considered Harmful]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_734.png Profiling]]
**[#lightblue] <i><size:12>Chapter 16. Reuse
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_735.png On Not Reinventing the Wheel]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_736.png Why do programmers reinvent wheels?]]
****[#darkorange] |<#red><b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_736.png The Tale of Random Newbie]]|
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_737.png Transparency as the Key to Reuse]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_738.png From Reuse to Open Source]]
***[#green] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_738.png From Reuse to Open Source]]
****[#a] <b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_739.png The Best Things in Life Are Open]]
*****[#a] *<b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_740.png Issues in Using Open-Source Software]] \n**<b><i><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_740.png When You Need a Lawyer…]]
**[#lightblue] <i><size:12>""Book: The Cathedral & the Bazaar""

***[#green] <b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_754.png Introduction]]
****[#yellow] <i><size:12><color #black>The **MS ofﬁce suite,** the 1980s killer application, wasn’t challenged until the 1990s with the introduction of the <b>web browser and server.
***[#green] <b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_754.png The rise of Unix]]
***[#green] <b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_754.png Prologue (introduction): The Real Programmers]]
***[#green] <b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_754.png The End of Elder Days]]
***[#a]:*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_755.png 1- Every good work of software starts by scratching a developer’s personal itch.]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_755.png 2- Good programmers know what to write. Great ones know what to rewrite (and reuse).]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_755.png 3- ‘‘Plan to throw one away; you will, anyhow. " (Fred Brooks, The Mythical Man-Month, Chapter 11)]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_755.png 4- If you have the right attitude, interesting problems will ﬁnd you.]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_755.png 5- When you lose interest in a program, your last duty to it is to hand it off to a competent successor.]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_755.png 6- Treating your users as co-developers is your least-hassle route to rapid code improvement and effective debugging.]]
|<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_755.png 7- Release early. Release often. And listen to your customers.]]|<#red><b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_785.png Part-2 on Linus Torvalds]]|<#grey><b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_785.png The illustrated guide to PhD]]|
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_756.png 8- Given a large enough beta-tester and co-developer base, almost every problem will be characterized quickly and the ﬁx obvious to someone.]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_756.png 9- Smart data structures and dumb code works a lot better than the other way around.]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_756.png 11- The next best thing to having good ideas is recognizing good ideas from your users. Sometimes the latter is better.]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_756.png 12- Often, the most striking and innovative solutions come from realizing that your concept of the problem was wrong.]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_756.png 13- ‘‘Perfection (in design) is achieved not when there is nothing more to add, but rather when there is nothing more to take away.’’]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_756.png 14- Any tool should be useful in the expected way, but a truly great tool lends itself to uses you never expected.]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_756.png 15- When writing gateway software of any kind, take pains to disturb the data stream as little as possible — and never throw away information unless the recipient forces you to!]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_757.png 17- A security system is only as secure as its secret. Beware of pseudo-secrets.]]
**<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_757.png Necessary Preconditions for the Bazaar Style]]
*<b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_758.png 18- To solve an interesting problem, start by ﬁnding a problem that is interesting to you.]];
***[#green] <b><i><size:12><color #red>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_759.png The Manufacturing Delusion]] & [[docs/3-programming-languages/Venkat-Subramaniam/images/img_760.png The Inverse Commons]]
***[#gold] <i><color #black><size:12><b>Two values of software
****[#green] <i><color #white><size:12><b>Behavioral value
*****[#yellow]:|<#white><i><color #black><size:12>help  **stakeholders** <b>"make or save money".</b> Is actually **use cases** or <b>feature development. (& problem solving)|
**<i><color #black><size:12>by **making machines behave** in ways that **satisfy** the <b>requirement.
*<i><color #black><size:12>Many **programmers** believe this is the entirely of their <b>job. They are sadly mistaken.;
****[#green] <i><color #white><size:12><b>Structural value
*****[#yellow]:<i><color #black><size:12>is **architecture** & often ignored by the <b>developers
====
*<i><color #black><size:12>**Architecture:** Soft-ware is a compound word
*<i><color #black><size:12>When **stakeholders** change their **minds** the **"change"** to the "software" should be <b>"simple & easy" to make.
*<i><color #black><size:12>The **cost of change** should be **proportional** to <b>scope (range), not shape.;
*****[#yellow]:|<#white><i><color #black><size:12><b><u>Scope Vs Shape:|
*<i><color #black><size:12>**Stakeholders** believe that the **requirements & changes** are only **complicated** by <b>scope.
*<i><color #black><size:12>**Programmers** see each new **requirements** as a **puzzle piece** that must be **fit** into an <b>ever more complex puzzle.
|<#white><i><color #black><size:12>**Solution:** keep the puzzle **"simple".**|;
****[#a]:<i><color #black><size:12><b>The book Cathedral & bazaar in 2001 said two values of software are:
|<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_743.png 1- Use value]]|<#red><i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_744.png More on Use/Sale value]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_745.png Inverse commons]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_746.png Part-2]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_747.png 3]]|
|<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_743.png 2- Sale value]]|<#red><i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_746.png Closed Source & Bad Design]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_749.png Part-2]], [[docs/3-programming-languages/Venkat-Subramaniam/images/img_748.png 3]]|
==<i><color #black><size:12><b>After the rise of [[docs/AI-ML-DL-Data-Science-and-BigData/machine-learning-ML/Modern-Machine-Learning.puml Modern Machine Learning]] ([[docs/AI-ML-DL-Data-Science-and-BigData/machine-learning-ML/3-deep-learning-DL/Deep-Learning.puml & Deep Learning]])==
*<i><color #black><size:12><b>Data [[docs/AI-ML-DL-Data-Science-and-BigData/big-data/big-data.puml (Big Data)]] has "value".;
*****[#darkorange]:*<i><color #black><size:12>""Program = **Data** + **instructions (Code)** on data""
*<i><color #black><size:12>In the beginning the movement was **Open Source "Code";** Nowadays **(in 2020)** the movement is <b>Open Source "Data" ([[docs/AI-ML-DL-Data-Science-and-BigData/data-science/data-engineering/GDPR.puml GDPR]] & [[docs/AI-ML-DL-Data-Science-and-BigData/data-science/data-engineering/HIPAA.puml HIPPA]]) compliant
==|<#a><i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_750.png Reinventing the Wheel!]]|==
<i><color #black><size:12>If I use your software then the "use value" of your software will increase. Why not write my own software so
<i><color #black><size:12>that my software gets "use value". Really! **This is called reinventing the wheel!.** Why? because s/w is
<i><color #black><size:12>open-source & answer one question. <b>Do you need "use value" or fame for writing the "software"?;

***[#green] <b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_761.png Afterword: Why Closing a Drivers Loses Its Vendor Money]]
***[#green] <b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_761.png Beyond Software?]]

**[#lightblue] <i><size:12>""[[https://www.youtube.com/watch?v=qoUsfuJaLxg&ab_channel=Level1Linux Interview in 2019: Eric S Raymond]]""
***[#green] <b><i><size:12><color #white>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_751.png Thoughts on RISC-V Foundation]]
****[#yellow] <b><i><size:12><color #black>RISC (Reduced Instruction Set Chip/Architecture/Machine)
***[#green] <b><i><size:12><color #white>Disruption from below
****[#yellow] <b><i><size:12><color #black>E.g. Startups both in hardware & software
****[#yellow] <b><i><size:12><color #black>ARM based systems/machines
***[#green] <b><i><size:12><color #white>Desktop adoption
***[#green] <b><i><size:12><color #white>Technology Updates
***[#green] <b><i><size:12><color #white>Technology Enthusiasts
****[#gold] <b><i><size:12><color #black>Go play with RaspberryPi & see what engages you most software or hardware?
***[#green] <b><i><size:12><color #white>Golang vs Rust
****[#yellow] <b><i><size:12><color #black>Golang: Good for networking "applications" or in the cloud for microservices because of low memory usage (footprint)
****[#yellow]:<b><i><size:12><color #black>Rust: Good for embeded "systems" or "systems" programming e.g. like writing O/S, Compiler, parsing engines, DBMS, Browser, device drivers or edge computing IoT
<b><i><size:12><color #black>Rust is replacing C, C++ ;
***[#green] <b><i><size:12><color #white>Desktop
***[#green] <b><i><size:12><color #white>Big Little
***[#green] <b><i><size:12><color #white>The Future of python
***[#green] <b><i><size:12><color #white>NTP site
***[#green] <b><i><size:12><color #white>Book: The Programmer's way (A guild to right mindset)
****[#gold]:<b><i><size:12><color #black>A new book he is working on; It's same like the book "The art of Unix Programming". But this is new book is about how to think
<b><i><size:12><color #black>like a master programmer. This new book is not confined to UNIX design tradition.
<b><i><size:12><color #black>In this new book I'm trying to give people a sense of; In order to architecture & "systems" programming; How you've to learn
<b><i><size:12><color #black>to carve up the world with your mind ;
****[#a] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_753.png Reference locality in datastructures]]
****[#a] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_752.png Engineering, Design & fluctuating cost]]
***[#green] <b><i><size:12><color #white>Defect Attractors

*[#darkblue] <b><i><size:12><color #white>Book: The Programmer's way \n<b><i><size:12><color #white>(A guild to right mindset)
**[#lightblue]:<b><i><size:12><color #black>A new book he is working on; It's same like the book "The art of Unix Programming". But this is new book is about how to think like a master programmer.
<b><i><size:12><color #black>This new book is not confined to UNIX design tradition. In this new book I'm trying to give people a sense of; In order to architecture & "systems" programming
<b><i><size:12><color #black>How you've to learn to carve up the world with your mind;

**[#lightblue] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_753.png Reference locality in datastructures]]
**[#lightblue] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_752.png Engineering, Design & fluctuating cost]]
**[#lightblue] <b><i><size:12><color #black>Five Gates of the way
***[#gold] <b><i><size:12><color #black>Mastery of programming rests on two pillars:
****[#darkorange]:|<#white><b><i><size:12><color #black>1- Skill with the Tools (e.g. compilers, interpreters, editors, VCS, repository sites (github, gitlab, bitbucket,) etc.|
<b><i><size:12><color #black>& all technical impediments we use these days). In an IDE you can get all of them in one place.
*<b><i><size:12><color #black>Skill with the tools is easy but not simple.;

****[#darkorange]:|<#white><b><i><size:12><color #black>2- Right mindset.|<#a><b><i><size:12><color #black>LLMs as [[docs/3-programming-languages/Venkat-Subramaniam/images/img_513.png mind]] amplifiers is a fascinating frame but they are not [[docs/3-programming-languages/Venkat-Subramaniam/images/img_513.png minds]]!|
*<b><i><size:12><color #black>Right mindset (which is far more important) is simple but  not easy.
<i><size:12><color #black><b>\t[[docs/3-programming-languages/Venkat-Subramaniam/images/img_268.png You've to approach problems in a particular way that finds the places to break them apart into pieces that you can specify.]]
<i><size:12><color #black>\tI think is a skill that can be learned but in general we're very poor at teaching it except by having people repeatedly bash their heads into the wall of
<i><size:12><color #black>\twriting code and seeing what kind of blood comes out. <b>Read my Book The art of unix programming.
<b><i><size:12><color #black>This talk is about achieving and maintaining right mindset.;

***[#gold] <b><i><size:12><color #black>First Gate
****[#yellow] <b><i><size:12><color #black>Sequential Assignment: that is assigned to a variable. What happens when you assign a "value" to a variable?
****[#yellow] <b><i><size:12><color #black>If you don't understand first gate then you will "fail programming 101" course. Someone in the audience said oh, it's "algebra".
****[#yellow] <b><i><size:12><color #black>According to 1988 paper only 2% of world population could pass the first gate.

***[#gold] <b><i><size:12><color #black>Second Gate
****[#yellow] <b><i><size:12><color #black>Recursion: the idea that a function can call itself. What happens behind the scenes to achieve recursion? Not many programers understand this concept!

***[#gold] <b><i><size:12><color #black>Third Gate
****[#yellow] <b><i><size:12><color #black>Pointers: being able to distinguish between "value" & reference to the "value". And reason about data structures that 've pointers in them such as linkedlist, tree, graphs, etc.
****[#yellow] <b><i><size:12><color #black>This actually should of RAM (sequential or random access) or Linear or non-linear data structures.
****[#yellow] <b><i><size:12><color #black>Some people could never get this, there was time in programming when there were no pointers. e.g. before C language
****[#a] <b><i><size:12><color #black>Gate 3a: "Data structuring & data normalization" both are same concept but different names!

***[#gold] <b><i><size:12><color #black>Fourth Gate
****[#a] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_762.png Closures or Lambda: ]] e.g. it's great tool & very handy for callbacks. meaning when you've to program in callbacks.

***[#gold] <b><i><size:12><color #black>Fifth Gate
****[#yellow]:<b><i><size:12><color #black>Concurrency: What happens when you've multiple Processes or Threads of execution & they 've to mediate common access to shared data structures & you've problems like
<b><i><size:12><color #black>asynchronous processes trashing data or reading incomplete data (here means locks) and 've to deal with issues like deadlocks & livelocks. When you hit moore's law then
<b><i><size:12><color #black>you've no choice but do concurrency.;
****[#yellow]:<b><i><size:12><color #black>Is more difficult than 4rth gate. The order of the gates also represents their difficultly level
<b><i><size:12><color #black>Order can vary based on the first language the programmer himself was exposed to.;
*****[#a] <b><i><size:12><color #black>[[https://www.youtube.com/watch?v=xnGWRRexRlk&ab_channel=Futurology%E2%80%94AnOptimisticFuture The End of Moore’s Law?! (Shrinking The Transistor To 1nm)]] 10-minute

***[#a]:*<b><i><size:12><color #black>These 5-gates are actually techniques through which a programer has to pass daily.
*<b><i><size:12><color #black>He tried to put these gates in order like Robert C Martin did with SOLID acroynm. As there are more principles such as YAGNI, KISS, DRY, SLAP, GRASP, and so on
<b><i><size:12><color #black>In the same manner there can be more gates in-between these gates or maybe before/after these gates that has been identified by him.
====
<b><i><size:16><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_764.png Eric S Raymond: In describing these five gates I'm trying to focus on simple characterizable barriers to gaining more mastery]]
<b><i><size:12><color #black>there may be something that can be abstracted from data structure design that's that simple but I don't know that there is yet.;

**[#lightblue] <b><i><size:12><color #black>Audience: \n<b><i><size:12><color #black>Is programming \n<b><i><size:12><color #black>learnable?
***[#lightblue] <b><i><size:12><color #black>Two Kinds of skills & \n<b><i><size:12><color #black>Two kinds of Geniuses
****[#gold] <b><i><size:12><color #black>Two Kinds of Geniuses \n<b><i><size:12><color #black>in the world are:
*****[#a] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_763.png 1- Talent Monsters]]
******[#yellow]:<b><i><size:12><color #black>Talent monsters can spot each other or identify another talent monster.
====
<b><i><size:12><color #black>Richard Faymen was talent master in physics. He had uncanny amount of talent to understand physiological "systems"
<b><i><size:12><color #black>He had very good physical intuition.;

*****[#a] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_763.png 2- Skill Monsters]]
******[#grey] *<b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_654.png Private Victory]] & [[docs/3-programming-languages/Venkat-Subramaniam/images/img_653.png 7-habits]]
****[#yellow] <b><i><size:12><color #black>The path to mastery will be very different based on from where you started. Having a talent controls how fast you start but it doesn't control where you end up.

***[#a] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_766.png Ground Truth Specification Document]]

***[#darkorange] <b><i><size:12><color #black>Two Kinds of pits you may fall into \n<b><i><size:12><color #black>while you program there can be more:
****[#a] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_769.png 1- Stupid Problem]]
*****[#a] <b><i><size:12><color #black>Your mental model of the problem is correct but the machine or code is not working accordingly!. Hence there is bug in the machine/hardware or code.
****[#gold] |<#grey><b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_132.png 2- Finger Trap]]|<#red><b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_769.png More Explanation]]|
*****[#a]:<b><i><size:12><color #black>Your mental model of the problem is incorrect but the machine or code is working accordingly meaning execution of incorrect mental model
<b><i><size:12><color #black>hence producing useless results (machines are dumb, stupid boxes)!;

*****[#a]:<i><size:12><color #black><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_133.png Code is tool or instrument, code is what it does it's not a substitute for thought or correct mental model, getting a correct mental model is hard.]]
<i><size:12><color #black><b>Code or tool or instrument can't help when you have an incorrect mental model of a problem or solution. This means that you does understand the
<i><size:12><color #black><b>concept or problem instead you must get enough domain knowledge so that you can improve your mental model.;

**[#lightblue] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_765.png Maps create Mindset]] \n*<b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_766.png Part-2]]
***[#gold] <b><i><size:12><color #black>Mindset & AI
****[#a] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_770.png Current AI, ChatGPT & LLMs Hype]]
*****[#darkorange] <b><i><size:12><color #black>[[https://www.youtube.com/watch?v=GVsUOuSjvcg&ab_channel=Veritasium Digital computers have served us well for decades, but the rise of artificial intelligence demands a totally new kind of computer: analog.]] 20-minute
****[#a] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_771.png Story & History of Programming]]
*****[#darkorange]:*<b><i><size:12><color #black>[[https://www.youtube.com/watch?v=-M6lANfzFsM&ab_channel=Futurology%E2%80%94AnOptimisticFuture The History of Computing]] 10 minute. This is the best video
*<b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_771.png History of Computers | From 1930 to Present]] 5-mintue
*<b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_771.png History of Computers | From 1930 to Present]] 5-mintue;
****[#grey] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_771.png 1- Programming by changing  plugs on patch boards]]
*****[#darkorange] *<b><i><size:12><color #black>[[https://www.youtube.com/watch?v=-M6lANfzFsM&ab_channel=Futurology%E2%80%94AnOptimisticFuture The History of Computing]] 10-minute
****[#grey] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_771.png 2- Symbolic Assemblers]]
*****[#darkorange] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_771.png COAL]] & [[docs/3-programming-languages/Venkat-Subramaniam/images/img_771.png DLD]]
****[#grey] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_771.png 3- Compilers]]
*****[#grey] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_418.png Operating System + Processor = ]] Platform
*****[#darkorange]:*<b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_109.png Assembler vs Compiler vs Linker]]
*<b><i><size:12><color #black>[[docs/books/1-books-backlog/compiler-construction/compiler-construction-and-design.puml Discrete Math]]
*<b><i><size:12><color #black>[[docs/books/1-books-backlog/compiler-construction/compiler-construction-and-design.puml Theory of Automata]]
*<b><i><size:12><color #black>[[docs/books/1-books-backlog/compiler-construction/compiler-construction-and-design.puml Compiler construction & Design?]];
****[#grey] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_771.png 4- Structured Programming (Structured Analysis & Design)]]
****[#grey] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_771.png 5- OOA&D, OOP, MDD, CBD, & UML]]
****[#grey] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_771.png 6- Now AI & ChatGPT]] \n*<b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_7.png Grady Booch]]
*****[#darkorange]:*<b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_62.png The Ambition to engineer has gone up & down]]
*<b><i><size:12><color #black>LLMs as [[docs/3-programming-languages/Venkat-Subramaniam/images/img_513.png "mind"]] amplifiers is a fascinating frame but they are not [[docs/3-programming-languages/Venkat-Subramaniam/images/img_513.png minds]]!
*<b><i><size:12><color #black>UNIX Philosophy: [[docs/3-programming-languages/Venkat-Subramaniam/images/img_704.png 1- Rule of modularity]] & [[docs/3-programming-languages/Venkat-Subramaniam/images/img_707.png 3- Rule of composition]]
==|<b><i><size:12><color #black>Basic & Fundamental Subjects|==
*<b><i><size:12><color #black>Statistics & Probability, Linear Algebra, Calculus 1 & 2, Machine Learning (Classic & Modern)
*<b><i><size:12><color #black>Discrete Math, Data structures & Algorithms, Python, SQL, NoSQL;
*****[#a] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_766.png Audience Asks: Senior & Junior Programmer Jobs getting replaced]]

****[#a] <b><i><size:12><color #black>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_766.png Ground Specification Document]]
@endmindmap

