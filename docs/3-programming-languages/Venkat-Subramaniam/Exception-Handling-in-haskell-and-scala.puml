@startmindmap
title =<i><b><u>Exception Handling in Functional Programming <color #red>(Haskell & Scala)
!theme hacker


*[#darkblue] <i>Exception Handling in\n<i>Functional Programming
**[#lightblue] <i><color #blac><size:12>Basics
***[#green] <b><i><color #white><size:12>Immutability
****[#yellow] <i><color #black><size:12>Focuses on immutable data to prevent unexpected changes and facilitate error handling.
***[#green] <b><i><color #white><size:12>Pure Functions
****[#yellow] <i><color #black><size:12>Functions without side effects that produce consistent results, aiding in predictable error handling.
**[#lightblue] <i><color #blac><size:12>Error Signaling
***[#green] <b><i><color #white><size:12>Option Types
****[#yellow] <i><color #black><size:12>**Some(Type):** Represents a value of the given Type.
****[#yellow] <i><color #black><size:12>**None:** Indicates absence of a value.
***[#green] <b><i><color #white><size:12>Either Types
****[#yellow] <i><color #black><size:12>**Left(Type):** Represents failure or error.
****[#yellow] <i><color #black><size:12>**Right(Type):** Represents success or valid result.
***[#green] <b><i><color #white><size:12>Try-Catch Equivalent
****[#yellow] <i><color #black><size:12>**Try:** Functional construct to manage exceptions and errors within a controlled context.
****[#yellow] <i><color #black><size:12>**Success:** Indicates successful execution, holding the result.
****[#yellow] <i><color #black><size:12>**Failure:** Carries information about an encountered error.
***[#green] <b><i><color #white><size:18>[[docs/3-programming-languages/Venkat-Subramaniam/CompletableFuture.puml CompletableFuture API:]]
****[#yellow] <i><color #black><size:12> <b>exceptionally()</b> way of handling is better than <b>Try-Catch Equivalent (Try, Scucess, & Failure)\n<i><color #black><size:12>but not perfect
****[#yellow]:<i><color #black><size:12>A bit better with a good separation of concern for each function:
*<i><color #black><size:12><b>then...</b> focuses on <b>data
*<i><color #black><size:12><b>exceptionally...</b> focuses on <b>error
*<i><color #black><size:12>But, we still 've to deal with a mixture of data handling & error handling in <b>different stages</b> of the <b>pipeline;
**[#lightblue] <i><color #blac><size:22>Error Handling Strategies
***[#green] <b><i><color #white><size:12>Pattern Matching
****[#yellow] <i><color #black><size:12>Matches data structures to handle different error types or outcomes.
***[#green] <b><i><color #white><size:22>Monads
****[#yellow] <i><color #black><size:12>**Option Monad:** Handles absence of values without null.
****[#yellow] <i><color #black><size:12>**Either Monad:** Manages success or failure computations.
****[#yellow] <i><color #black><size:12>**Error Monad:** Handles errors in a controlled computational context.
****[#darkorange] <b><i><color #black><size:12>Advance & Extra "Category Theory" video lectures
****[#darkorange] <b><i><color #black><size:12>Advance & Extra book "Structure & interpretation of Computer Programs" & video lectures "MIT"
**[#lightblue] <i><color #blac><size:12>Advantages
***[#green] <b><i><color #white><size:12>Predictability
****[#yellow] <i><color #black><size:12>Encourages explicit error handling, making code more predictable.
***[#green] <b><i><color #white><size:12>Composability
****[#yellow] <i><color #black><size:12>Facilitates composing functions, enabling better error propagation and handling.
***[#green] <b><i><color #white><size:12>Safety
****[#yellow] <i><color #black><size:12>Emphasizes safe handling of errors without causing unexpected behavior.
@endmindmap
