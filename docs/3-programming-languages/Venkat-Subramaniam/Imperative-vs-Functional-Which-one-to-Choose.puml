@startmindmap
title = <b><i><u><size:18>Imperative vs Functional: Which one to Choose?\n<img:images/img_213.png{scale=1}>
caption <img:images/img_590.png>
*:<i><size:16>The imperative style of programming is the most popular, familiar, and widely used, and yet is packed with accidental complexity. Functional programming is gaining popularity,
<i><size:16>less accidental complexity, and makes it easier to understand code once we're familiar with the paradigm. However, it has its own set of limitations. Should we choose to
<i><size:16>program in imperative or should we use functional? Which one is better or should we be choosing one over the other on different occasions? We'll explore the answers to these
<i><size:16>questions in this presentation;

!theme hacker
*[#darkblue] <color #white><i>Imperative vs Functional:\n<color #white><i>Which one to Choose?
**[#lightblue] <i>Imperative Style
***[#green] <size:12><color #white><i> You tell **what** to do **and** how to do it
****[#yellow] <size:12><color #black><i>Imperative style has <b>higher "accidental complexity"
****[#yellow] <size:12><color #black><i>Problem with <b>imperative style
*****[#yellow]:*<size:12><color #black><i>Garbage variables
* <size:12><i>Has mutability
* <size:12><i>Verbose
* <size:12><i>Prone to "Errors"
* <size:12><i>Hard to parallelize;
***[#green]:<size:12><color #white><i>It is easier to write **(due to familiarity)** but **hard to read**.
<size:12><color #white><i>Don't confuse familiar with simple, things that are simple
<size:12><color #white><i>should remain "simple", and things that are complex
<size:12><color #white><i>should be "manageable".
<b><size:18><color #white><i>Example:
<img:images/img_3.png{scale=1.13}>;
****[#yellow]:<size:12><color #black><i>**Venkat:** It took me **8-min** to solve a **problem** in imperative style. <b>Easy to "write" but hard to read!
<size:12><color #black><i>The same **problem** took me **8-hours** in declarative style (FP).<b> Hard to "write" but easy to read! ;
****[#yellow] <size:12><color #black><i>Problem with <b>imperative style</b> is that it can get <b>progressively hard
****[#yellow] <size:12><color #black><i><b>Imperative style</b> is good at dealing with <b>side-effects, exceptions
****[#yellow] <size:12><color #black><i><b>Functional style</b> is good at dealing with <b>scale, parallelization, reasoning

**[#lightblue] <i>Declarative Style
***[#green] <size:12><color #white><i> You tell **what** to do **but not** how to do it
***[#green] <b><size:12><color #white><i> example \n<img:images/img_2.png{scale=0.8}>

**[#lightblue] <size:22><i>[[docs/3-programming-languages/Venkat-Subramaniam/Streams.puml Functional Style\n(Streams)]]
***[#green] <b><size:18><color #white><i> Declarative Style + <color :darkorange>Higher Order Functions
****[#yellow] <size:12><color #black><i><b>Functional style</b> is good at dealing with <b>scale, parallelization, reasoning

***[#green] <b><size:12><color #white><i> <i><color :darkorange>Higher Order Functions

****[#yellow]:<b><i><size:12>Much like how we pass data, we can pass the code or functions around. These functions
<b><i><size:12>that can either receive or return function are called <color :black> "Higher Order Functions";
***[#green] <size:18><color #white><i> <color :white>"Flows" like "problem statement", has "less complexity" \n\n<b><size:18><color #white><i> example\n<img:images/img.png{scale=0.92}>
****[#black] <size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_283.png Parallel code execution]] <size:9>\t("Parallelism" is not the "goal" of "concurrency")\n<img:images/img_1.png{scale=0.8}>
*****[#black] <size:12><color #white><i><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_283.png "Sharing variables" is not "bad" (if "encapsulated")]]
*****[#black] <b><size:12><color #white><i>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_283.png "Mutating variables" is not "bad" either (if "encapsulated")]]
*****[#black] <b><size:12><color #white><i>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_283.png But "Sharing" + "Mutating variables" = bad approach (Devils work)]]
****[#yellow] <size:12><color #black><i>Issues with Functional Programming
*****[#yellow] *<size:12><color #black><i>Make sure the "lambda expressions (->)" and "functional pipeline" are "pure". \n*<size:12><color #black><i>**What is Pure?** Pure functions do not have side-effects. They are **idempotent.**\n*<size:12><color #black><i>**Idempotent:** For the same input function always produces same output
****[#yellow] <size:12><color #black><i><b>Functional composition (like object composition in OOP)
****[#yellow] <size:12><color #black><i><b>Rules for purity:
*****[#yellow] *<size:12><color #black><i>The function does not mutate or change anything that is visible from the outside \n* <size:12><color #black><i>The function does not depend on anything from outside that may/possibly change
****[#a]:=<i><color:darkorange>[[docs/3-programming-languages/Venkat-Subramaniam/Exception-Handling-in-Functional-and-Reactive-Programming.puml Exception Handling:]]</color> is an imperative style programming idea.
<size:18> <i>FP & Exception handling are __mutually exclusive.__ Do not throw exceptions
<size:18> <i>in FP. Treat __"Errors"__ as a form of __"Data"__ and deal with them __"downstream"__;

***[#green] <size:16><color #white><i> <color :white>Functional Programming = Functional Composition + Leazy evaluation
***[#green] <size:16><color #white><i> <color :white><b>[[docs/3-programming-languages/Venkat-Subramaniam/Asynchronous-Programming-in-Java-Options-to-Choose-from.puml Functional Reactive Programming]]</b> = Functional Programming++
@endmindmap
