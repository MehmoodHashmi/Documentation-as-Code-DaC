@startuml
title =<i>Specification Description Language (SDL),\n<i><u><size:16>especially designed for "reactive & distributed systems"\n[[docs/2-uml/PlantUML/activity-diagram/activity-diagram-syntax.png for more details click me]]
|Swim-lane-1|
start
note right
<i><b>SDL covers 5-main aspects:
<i>1- Structure
<i>2- Communication
**<i> Communication between the **components** takes place through **gates** connected by <b>channels.
**<i> **Channels** are of **delayed channel type,** so **communication** is usually **asynchronous,**
\t<i>but when the **<u>delay is set to zero (that is, no delay)</u>** the **communication** becomes **synchronous.**
<i>3- Behavior
**<i> The **behavior** of **components** is explained by **partitioning the system** into a series of **hierarchies**
<i>4- Data
<i>5- Inheritance
end note
:SDL Shape;
:<b>input/receive; <<input>>
note
*async message or signal
*non-blocking message or signal
end note

note right
* in sequence diagram
<img:img_1.png{scale=.7}>
end note

:<b>output/send; <<output>>
note
*async message or signal
*non-blocking message or signal
end note

note right
* in sequence diagram
<img:img_2.png{scale=.95}>
end note

:procedure; <<procedure>>
note
*is function call will figure it out
end note
:load; <<load>>
:save; <<save>>
:continuous; <<continuous>>
note left
*same concept but different notation
<img:img.png{scale=.5}>
<b><i>[[https://stackoverflow.com/questions/43990743/uml-activity-diagram-how-to-show-game-ends-when-time-has-passed Show timers and an interrupt using a \nInterruptible Regions]]
end note
note right
*<i>is timer <size:30><&timer>
*<i>e.g. At time
*<i>e.g. On friday
*<i>e.g. After 20-seconds
end note
:task; <<task>>
|Swim-lane-2|
end
@enduml
