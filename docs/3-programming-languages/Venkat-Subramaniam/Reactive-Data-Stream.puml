@startmindmap
title =<i>__ Reactive Data Stream__ \n<img:images/img_25.png{scale=0.7}>
!theme hacker

*[#darkblue] <i><color #white>Reactive Data Stream

**[#lightblue] <i><color #blac><size:12>Definition
***[#green] <b><i><color #white><size:12>Data stream that follows the principles of reactive programming
***[#green] <b><i><color #white><size:12>Emphasizes responsiveness, elasticity, and resilience

**[#lightblue] <i><color #blac><size:12>**Reactive Programming**
***[#green] <b><i><color #white><size:12>**Definition**
****[#yellow] <i><color #black><size:12>Programming paradigm focused on building asynchronous and event-driven systems
****[#yellow] <i><color #black><size:12>Enables handling and processing of data streams in a non-blocking manner

***[#pink] <i><size:22>**Key Concepts**
****[#yellow] <i><color #black><size:12><b>Observables
*****[#yellow] <i><color #black><size:12>Represents a stream of data or events that can be observed and processed
*****[#yellow] <i><color #black><size:12>Emits data items asynchronously to subscribers

****[#yellow] <i><color #black><size:12><b>Observers
*****[#yellow] <i><color #black><size:12>Subscribes to observables and reacts to emitted data items or events
*****[#yellow] <i><color #black><size:12>Processes the data items asynchronously as they arrive

****[#yellow] <i><color #black><size:12><b>Operators
*****[#yellow] <i><color #black><size:12>Functions for transforming, filtering, combining, or manipulating the data stream
*****[#yellow] <i><color #black><size:12>Enables complex operations on the data items emitted by observables

**[#lightblue] <i><color #blac><size:12>Reactive Streams
***[#green] <b><i><color #white><size:12>Definition
****[#yellow] <i><color #black><size:12>Initiative for providing a standard for asynchronous stream processing with non-blocking backpressure
****[#yellow] <i><color #black><size:12>Enables interoperability and composition of reactive systems and libraries

***[#darkorange] <i><size:22><b>[[docs/3-programming-languages/Venkat-Subramaniam/gif/stream-aggregation.adoc Backpressure]]
****[#yellow] <i><color #black><size:12>Mechanism for controlling the rate of data flow in a reactive data stream
****[#yellow] <i><color #black><size:12>Prevents overwhelming subscribers with data they cannot handle
****[#darkorange] <i><color #black><size:22><b>[[https://zendesk.engineering/event-pipelines-part-1-backpressure-and-buffering-1bba0ed3451e Event Pipelines (Part 1): Backpressure and Buffering]] a must read

***[#green] <b><i><color #white><size:12>Technologies and Libraries
****[#yellow] <i><color #black><size:12>ReactiveX (Rx)
*****[#yellow] <i><color #black><size:12>Cross-platform library for reactive programming with support for multiple programming languages
*****[#yellow] <i><color #black><size:12>**Examples:** RxJava, RxJS, Rx.NET

****[#yellow] <i><color #black><size:12>Project Reactor
*****[#yellow] <i><color #black><size:12>Reactive library for building non-blocking applications on the Java Virtual Machine (JVM)
*****[#yellow] <i><color #black><size:12>Provides integration with Spring Framework for reactive applications

****[#yellow] <i><color #black><size:12>Akka Streams
*****[#yellow] <i><color #black><size:12>Stream processing library for building reactive and scalable systems in the Akka toolkit
*****[#yellow] <i><color #black><size:12>Offers support for backpressure and asynchronous processing

**[#lightblue] <i><color #blac><size:22>Use Cases
***[#green] <b><i><color #white><size:22>Real-Time Applications
****[#yellow] <i><color #black><size:12>Reactive data streams are suitable for building real-time systems
****[#yellow] <i><color #black><size:12>**Examples:** Real-time analytics, real-time dashboards, streaming data pipelines

***[#green] <b><i><color #white><size:22>IoT (Internet of Things)
****[#yellow] <i><color #black><size:12>Reactive streams handle high-velocity and high-volume data from IoT devices
****[#yellow] <i><color #black><size:12>**Examples:** Sensor data processing, telemetry data analysis

***[#green] <b><i><color #white><size:22>Event-Driven Architectures
****[#yellow] <i><color #black><size:12>Reactive programming facilitates event-driven communication and handling of events
****[#yellow] <i><color #black><size:12>**Examples:** Microservices, event sourcing, event-driven messaging systems

@endmindmap
