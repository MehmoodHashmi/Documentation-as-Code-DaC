@startmindmap
title =<i><b><u><size:18>Building Cloud Native Applications with Micronaut and GraalVM
!theme hacker


*[#darkblue] <i><color #white>Building Cloud Native Apps\n<i><color #white>with Micronaut & GraalVM
**[#lightblue] <i><color #black><size:12>Part-1
***[#green] <b><i><color #white><size:12>Creating Micronaut Applications for the JVM & GraalVM
***[#green] <b><i><color #white><size:12>What is Micronaut & Why?
****[#yellow] <i><color #black><size:12>The demands of the modern world
****[#yellow] <i><color #black><size:12>Microservices & Serverless computing
****[#yellow] <i><color #black><size:12>**Polyglot programming:** Java, Groovy, & Kotlin
*****[#darkorange] <i><color #black><size:12>If you choose **Micronaut** then you can select any of the following <b>languages (Java, Groovy, & Kotlin)
****[#yellow] <i><color #black><size:12>**Fast Startup time:** \n*<i><color #black><size:12>Compile time metaprogramming, no reflection
****[#yellow] <i><color #black><size:12>High throughput
****[#yellow] <i><color #black><size:12>Small memory footprint
*****[#darkorange] *<i><color #black><size:12>Both in <b>deployment & in Production
****[#yellow] <i><color #black><size:12>Convention over configuration
****[#yellow] <i><color #black><size:12>Sensible defaults
*****[#darkorange] <i><color #black><size:12>Things work as they are supposed to work, & also prevention of <b>configuration hell
****[#yellow] <i><color #black><size:12>Dependency injection with compile time metaprogramming instructions at runtime
****[#yellow] <i><color #black><size:12>Both conventional & reactive APIs
***[#green] <b><i><color #white><size:12>Benefits
****[#yellow] <i><color #black><size:12>**Speed of:** development, deployment, startup, & execution
****[#yellow] <i><color #black><size:12>**Small footprint**
****[#yellow] <i><color #black><size:12>**Declarative in Nature**
****[#yellow] <i><color #black><size:12>**Compile-time dependency injection**
****[#yellow] <i><color #black><size:12>Natively cloud-native
****[#yellow] <i><color #black><size:12>Built-in circuit-breakers
****[#yellow] <i><color #black><size:12>Compile-time meta-programming
***[#green]:<b><i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_518.png Let's create an App]]
*<b><i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_519.png Directory Structure]]
*<b><i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_520.png In IntelliJ IDE]]
*<b><i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_4.jpg Clean Architecture]]
<b><i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_4.jpg & boundary crossing]]
==<b><i><color #yellow><size:12>Clean Architecture==
*<b><i><color #white><size:12>[[docs/3-programming-languages/clean-architecture/images/Screenshot_6.png Part-0]]
*<b><i><color #white><size:12>[[docs/3-programming-languages/clean-architecture/images/Screenshot_7.png Part-1]]
*<b><i><color #white><size:12>[[docs/3-programming-languages/clean-architecture/images/Screenshot_8.png Part-2]]
*<b><i><color #white><size:12>[[docs/3-programming-languages/clean-architecture/images/Screenshot_9.png Part-3]];
****[#yellow] <i><color #black><size:12>Starting with a service service
****[#yellow] <i><color #black><size:12>Bean <b>configurations
*****[#darkorange]:*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_521.png @Singleton]] </b>(Each time you request an instance you get the same shared instance)
*<i><color #black><size:12><b>@Context </b>(use seldomly, even ask for advice from a team member)
*<i><color #black><size:12><b>@Prototype </b>(means each time I request an instance I will get a new instance instead of a same shared instance)
*<i><color #black><size:12><b>@Infrastructure
*<i><color #black><size:12><b>@RequestScope </b>(means each time I request an instance I will get a new instance instead of a same shared instance)
*<i><color #black><size:12><b>...;
****[#a] <i><color #black><size:12>Create a <b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_523.png Controller]]

****[#a] <i><color #black><size:12>Dependency injection of **[[docs/3-programming-languages/Venkat-Subramaniam/images/img_524.png service]]** into <b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_523.png Controller]]
*****[#darkorange]:*<i><color #black><size:12><b>Constructor injection
*<i><color #black><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_522.png Field injection]]
*<i><color #black><size:12><b>Java Bean property injection;
****[#yellow] <i><color #black><size:12>Creating a <b>Client

****[#yellow] <i><color #black><size:12>Going <b>Reactive
*****[#darkorange]:*<i><color #black><size:12><b>Reactive Programming
*<i><color #black><size:12><b>Publishers & Subscribers
*<i><color #black><size:12><b>Providing a reactive interface;

****[#yellow] <i><color #black><size:12>Deployment & Execution
*****[#darkorange]:*<i><color #black><size:12><b>.
*<i><color #black><size:12><b>.
*<i><color #black><size:12><b>.;

**[#lightblue] <i><color #black><size:12>Part-2
***[#green] <b><i><color #white><size:12>Creating for Microservices & Cloud Infrastructure
****[#yellow] <i><color #black><size:12>

@endmindmap
