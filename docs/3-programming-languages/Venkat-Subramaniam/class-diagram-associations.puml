@startmindmap
title =<i><b><u><size:18>Class Diagram Associations <size:14>[[https://www.youtube.com/watch?v=aWZFRk-w3ng (Build Abstractions Not Illusions)]]\n<img:images/img_68.png>

* <i><b><size:12>Most links inside the diagrams are clickable (but not inside IDE) if you use the finder or file-explorer and then use macOS native image viewer/previewer, and then hover over the link in the diagram \n*<i><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/Core-Software-design-principles-for-software-developers.puml Core Software design principles for software developers]] & [[docs/3-programming-languages/Venkat-Subramaniam/Towards-an-Evolutionary-Architecture.puml Towards an Evolutionary Architecture]]
** <i><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_128.jpg UML cheatsheet]]
* *<i><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_543.png class diagram]] \n*<i><b><size:12>[[docs/books/1-books-backlog/DBMS/database-relations-implementation.puml ERD diagram]], [[docs/2-uml/requirements-and-design-with-plantuml/1-use-cases-or-features/img_1.png 2]]
** <i><b><size:12>package diagram
*** <i><b><size:12>state machine diagram
****:*<i><b><size:12>[[docs/2-uml/requirements-and-design-with-plantuml/1-use-cases-or-features/use-case-2-0-overview.puml use case diagram]]
*<i><b><size:12>DFD diagram
*<i><b><size:12>[[docs/1-Requirement-Engineering/VU-course/Event-Storming-technique.adoc Event Storming]]
*<i><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/Towards-an-Evolutionary-Architecture.puml BDD & ATDD]]
*<i><b><size:8>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_248.png Keep your audience in mind]];

***** <i><b><size:12>sequence diagram
****** <i><b><size:12>communication diagram
******* <i><b><size:12>timing diagram
******** <i><b><size:12>[[docs/2-uml/PlantUML/activity-diagram/activity-diagram-syntax.png activity diagram]]
********* <i><b><size:12>component diagram
********** <i><b><size:12>deployment diagram \n*<i><b><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_247.png 4+1 View Model]]

!theme hacker
caption |<img:images/img_433.png>|<img:images/img_174.png{scale=.85}>|
skinparam hyperlinkColor white

*[#darkblue] <color #white><i>Class Diagram.\n<img:images/img_33.png>
**[#lightblue] <i><color #black><size:12>Introduction
***[#green]:<i><color #white><size:12><b>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_905.jpg The Modeling Process follows an iterative approach. The vocabulary, the process model and other artifacts are not created in a “Big Bang”.]]
*<i><color #black><size:12><b>[[https://www.laurenceanthony.net/software/antconc/ How to use AntConc?]] A freeware corpus analysis toolkit for concordancing and text analysis. & [[docs/3-programming-languages/Venkat-Subramaniam/images/img_906.jpg Part-2]]
====
<i><color #white><size:12>Taken to extremes, no **abstractions** means writing **machine code** because all **programming languages** are abstractions. Good **general-purpose abstractions** get turned into or added to programming languages.
<i><color #white><size:12>Good **special-purpose abstractions** become widely used **libraries** like <b>NumPy, OpenSSL or OpenCV. \t[[docs/3-programming-languages/Venkat-Subramaniam/images/img_929.png click me]];

**[#lightblue] <i><color #black><size:12>Class/Structural diagram or Data Model or System Design
***[#grey]:<i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_907.jpg class diagram]]
*<i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_907.jpg Mapping OO classes to Relational tables]]
|<#black><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_907.jpg In OOP focus is on data/object & relationship b/w objects rather than on functions]]|
|<#black><i><b><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_907.jpg Knowing the OO basics does not make you a good OO designer. Fold knowledge into data (Data structure)]]|
*<i><b><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_908.jpg Alogrithm & Data structure advice]];

**[#lightblue] <i><color #black><size:12>Controller, Handler, Listener?
***[#grey] <b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_909.png Enitiy, controller, and boundary]] \n*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_909.png Three types of classes]]
**[#lightblue] <i><color #black><size:12>Restful API Design
***[#a] *<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_910.jpg using class diagram]] & visual paradigm \n*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_910.jpg challenges]]


**[#lightblue] <i><color #black><size:12>Modeling semantic of class
***[#a]:*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_911.jpg to model the semantic of a class]]
*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_911.jpg objects]] & [[docs/3-programming-languages/Venkat-Subramaniam/images/img_911.jpg what is an object?]] & [[docs/3-programming-languages/Venkat-Subramaniam/images/img_911.jpg what is a class?]]
*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_911.jpg Links & associations]];

***[#a]:*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_912.jpg Operations]]
*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_913.jpg Active objects/classes]]
**<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_913.jpg Processes and Threads]];

****[#blue] <b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_914.jpg Flow of Control]]
*****[#orange]:*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_914.jpg Sequential vs concurrent system]]
*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_914.jpg Classes & Events]]
**<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_914.jpg communication, synchronization, & process views]];

****[#blue] *<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_915.jpg Modeling multiple flow of Controls]] \n*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_915.jpg Modeling Inter-process communication]]
*****[#orange]:*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_916.jpg Concurrency in sequence diagram]]
*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_916.jpg Concurrency in communication diagram]]
|<#black><b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_916.jpg Correct design for signals in UML class diagram?]]|<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_917.jpg What is signal?]]|;
******[#black]:<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_918.jpg Introduction to Events]]
*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_918.jpg Types of Events:]]
**<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_918.jpg 1- Signals (asynchronous)]]
**<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_918.jpg 2- Calls (synchronous)]]
**<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_918.jpg 3- Passage of time (asynchronous)]]
**<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_918.jpg 4- Change in state (asynchronous)]]
==|<#a><b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_919.jpg Sending & receiving signals]]|==
<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_919.jpg Modeling a family of Signals]]
<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_919.jpg Modeling Exceptions]]
<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_919.jpg Concurrency Models & Distributed systems similarity]]
<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_919.jpg Which Concurrency Model is best?]]
<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_919.jpg Concurrency Models]];

***[#a]:*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_921.jpg Modeling Comments]]
*<b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_921.jpg Modeling new semantics]]
**<b><i><color #black><size:8>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_921.jpg Object constraint Language]] (OCL)  ;

***[#a] <b><i><color #black><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_920.jpg Advanced relationships in UML]]
****[#blue]:*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_920.jpg Dependency]]** (bind, derive, friend, instanceOf, instantiate, powerType, refine, use)
*<i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_920.jpg There are two stereotypes that apply to dependencies between]] <b>packages.
*<i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_920.jpg Three stereotypes apply to interactions among]] <b>objects.
*<i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_920.jpg One stereotype applies to dependencies in the context of]]<b> state machines
*<i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_920.jpg One stereotype applies to dependencies in the context of]]<b> subsystem
*<i><color #white><size:12>[[docs/3-programming-languages/Venkat-Subramaniam/images/img_920.jpg There are four standard constraints that apply to the]]<b> generalization relationship;

****[#blue]:*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_924.png Raising Exceptions]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_924.png Data Types & enumerations]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_924.png Unique & readonly attributes/properties]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_924.png Value objects]]** and leaf class;

****[#blue]:*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_923.png Associations & Links]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_923.png Bi-directional accociations != Binary relationship or binary association]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_925.png Attributes]]**;

****[#blue]:*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_926.png Multiplicity (vs cardinality),]]** <b>[[docs/books/1-books-backlog/DBMS/Cardinality-vs-Multiplicity.puml Part2]]
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_926.png Ordering roles]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_926.png Association vs Link]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_926.png Constraints in class dependency]]**;

*****[#grey]:*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_927.png Association end names]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_927.png Reflexive (or self) association]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_927.png Constraint on a class]]**;

****[#blue]:*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_928.png Aggregation: Part-whole relationship]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_928.png Shared & composite aggregation]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_928.png membership relation]]**;

*****[#grey]:*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_930.png Composition]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_931.png Complications]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_931.png Types of aggregation]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_932.png part-whole relationship in UML]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_932.png Transitivity problem]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_932.png non part-whole relationships]]**;

****[#blue]:*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_933.png Collections]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_933.png Ordering & uniqueness]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_933.png Implementation]]**;

*****[#grey]:*<i><color #white><size:12><i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_934.png More on ordering]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_934.png Association constraints:]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_934.png implicit, ordered, changeable, addOnly, frozen, xor)]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_934.png Bags, and sequences]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_934.png ordering the ends of an association]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_934.png association name direction arrow]]**;

******[#orange]:*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_935.png UML constraints from IBM]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_935.png UML constraints from Visual Paradigm]]**
|<#grey><i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_935.png Object Constraint Language (OCL)]]**|;

****[#blue]:*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_936.png Adding Interfaces to modeling diagrams]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_936.png 1) Provided Interface 2) Required Interface]]**
**<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_531.png Explicit vs Implicit Interface]]**
*<i><color #white><size:12>**[[docs/3-programming-languages/Venkat-Subramaniam/images/img_936.png Association classes]]**;



'TODO have to complete this mindmap

@endmindmap
