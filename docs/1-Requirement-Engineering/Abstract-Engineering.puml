@startmindmap
title = <i><size:18>__Computer science__ is not __"science"__ & also it's not __"computer"__, instead it's <color #red><b><u>Abstract Engineering
caption <size:34> <i>__Computer science__ is not __"science"__ & also it's not __"computer"__, instead it's <color #red><b><u>Abstract Engineering\nThis statement is often attributed to Edsger Dijkstra, a Dutch computer scientist and pioneer in the field of computer science. The statement means that computer science is not merely the study of computers or the \nphysical hardware, but rather the study of algorithms, processes, and systems for solving problems and processing information.\n\nIn other words, computer science is concerned with the theoretical foundations of computing and the algorithms and structures that underlie it. It is about designing and developing computational systems that can \nefficiently and effectively solve problems, process data, and automate tasks. \n\nThe term <color #118888>**"abstract engineering"**</color> refers to the process of designing and building **systems** that are **abstract**, <color #118888>**meaning they exist only in the realm of ideas and concepts, rather than being physical objects.**</color> \nIt **involves designing algorithms and data structures** that can be **implemented in software and hardware**, as well as **developing software and systems that can be used to solve real-world problems."**
!theme hacker


*[#darkblue] <i><color #white>Abstract <color #pink>"Engineering"
**[#lightblue] <i><color #black><size:12>Definition
***[#green] <b><i><color #white><size:12>A **"process"** of designing, creating, and developing systems, structures, or processes that do not exist in **"physical form"**e.g. **ideas (or thoughts)**
**[#lightblue] <i><color #black><size:12>Key Concepts
***[#green] <b><i><color #white><size:12>Abstraction
****[#yellow] <i><color #black><size:12>The ability to represent complex systems or structures using simplified <b>models
*****[#gold] <i><color #black><size:12>A picture is worth thousand words!
****[#yellow] <i><color #black><size:12>Helps in reducing complexity and creating more efficient designs
***[#green] <b><i><color #white><size:12>Modularity
****[#yellow] <i><color #black><size:12>Breaking down complex systems into smaller, more manageable parts
****[#yellow] <i><color #black><size:12>Encourages code reusability and simplifies maintenance
***[#green] <b><i><color #white><size:12>Scalability
****[#yellow] <i><color #black><size:12>The ability to handle larger amounts of <color #118888>**"data or increased user traffic"**  without sacrificing **"performance"**
****[#gold] <i><color #black><size:12><b>Important for software systems that are expected to grow and evolve over time
***[#green] <b><i><color #white><size:12>Extensibility
****[#yellow] <i><color #black><size:12>The ability to easily add new features or functionality to existing systems
****[#yellow] <i><color #black><size:12>Enables systems to adapt to changing requirements and user needs
***[#green] <b><i><color #white><size:12>Robustness
****[#yellow] <i><color #black><size:12>The ability to handle unexpected or erroneous inputs without crashing or causing harm
****[#gold] <i><color #black><size:12><b>Important for systems that are expected to run continuously without human intervention
**[#lightblue] <i><color #black><size:12>Applications
***[#green] <b><i><color #white><size:12>Software <color #gold>"Engineering"
****[#yellow] <i><color #black><size:12>Designing and developing software systems using abstract engineering principles
****[#yellow] <i><color #black><size:12><b>Creating scalable, modular, and extensible software architectures
***[#green] <b><i><color #white><size:12>Hardware <color #gold>"Engineering"
****[#yellow] <i><color #black><size:12>Designing and developing hardware systems using abstract engineering principles
****[#yellow] <i><color #black><size:12>Creating modular and scalable hardware architectures
***[#green] <b><i><color #white><size:12>Civil <color #gold>"Engineering"
****[#yellow] <i><color #black><size:12>Designing and developing infrastructure systems using abstract engineering principles
****[#yellow] <i><color #black><size:12>Creating scalable and robust infrastructure designs
**[#lightblue] <i><color #black><size:12>Tools and Techniques
***[#green] <b><i><color #white><size:12>Modeling and Simulation
****[#yellow] <i><color #black><size:12>Creating simplified models of complex systems or processes to aid in design and analysis
****[#yellow] <i><color #black><size:12>Enables engineers to test and refine their designs before implementation
***[#green] <b><i><color #white><size:12>Prototyping
****[#yellow] <i><color #black><size:12>Building and testing early versions of a system or product to identify and address potential issues
****[#yellow] <i><color #black><size:12>Helps in reducing development time and costs
***[#green] <b><i><color #white><size:12>Testing and Debugging
****[#yellow] <i><color #black><size:12>Identifying and addressing errors or issues in a system or product
****[#yellow] <i><color #black><size:12>Essential for creating robust and reliable systems
***[#green] <b><i><color #white><size:12>Documentation
****[#yellow] <i><color #black><size:12>Creating clear and concise documentation of design decisions, requirements, and processes
****[#yellow] <i><color #black><size:12>Helps in ensuring that designs are scalable, modular, and extensible
**[#lightblue] <i><color #black><size:12>Conclusion
***[#green] <b><i><color #white><size:12>**"Abstract engineering"** is a powerful approach for designing and developing **complex systems that do not exist in** <color #118888>**physical form**</color>
***[#green] <b><i><color #white><size:12>It enables engineers to create more efficient, scalable, modular, extensible, and robust systems
***[#green] <b><i><color #white><size:12>Key concepts like abstraction, modularity, scalability, extensibility, and robustness are essential for successful abstract engineering
***[#green] <b><i><color #white><size:12>Various tools and techniques like modeling and simulation, prototyping, testing and debugging, and documentation help in implementing abstract engineering principles effectively
@endmindmap
